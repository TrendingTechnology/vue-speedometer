(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1261:function(module,exports,__webpack_require__){"use strict";(function(module){var _interopRequireDefault=__webpack_require__(73),_vue=__webpack_require__(431),_vue2=_interopRequireDefault(__webpack_require__(146)),_index=_interopRequireDefault(__webpack_require__(1286));_vue2.default.component("vue-speedometer",_index.default),(0,_vue.configure)(__webpack_require__(1299),module),(0,_vue.addParameters)({options:{showPanel:!0,showRoots:!0},docs:{inlineStories:!0}})}).call(this,__webpack_require__(93)(module))},1286:function(module,exports,__webpack_require__){"use strict";var _interopRequireWildcard=__webpack_require__(1287),_interopRequireDefault=__webpack_require__(73);Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"Transition",{enumerable:!0,get:function get(){return _enums.Transition}}),Object.defineProperty(exports,"CustomSegmentLabelPosition",{enumerable:!0,get:function get(){return _enums.CustomSegmentLabelPosition}}),exports.default=void 0;var _defineProperty2=_interopRequireDefault(__webpack_require__(191)),_debounce2=_interopRequireDefault(__webpack_require__(1309)),_each2=_interopRequireDefault(__webpack_require__(438)),_d=__webpack_require__(111),_config=__webpack_require__(435),_render=__webpack_require__(1294),_props=_interopRequireWildcard(__webpack_require__(1298)),_enums=__webpack_require__(281),_default={name:"vue-speedometer",props:_props.default,template:"\n    <div></div>\n  ",beforeCreate:function beforeCreate(){this.d3_refs={pointer:!1,current_value_text:!1}},created:function created(){this._initWatchers()},mounted:function mounted(){this.renderGauge()},data:function data(){return{force_render:this.forceRender}},watch:{forceRender:function forceRender(a){this.force_render=a}},methods:{_initWatchers:function _initWatchers(){var a=this;this.updateReadings=(0,_debounce2.default)(this._updateReadings,0,{leading:!1,trailing:!0});var b=(0,_props.getPropKeys)().filter((function(a){return"forceRender"!==a}));(0,_each2.default)(b,(function(b){a.$watch(b,(function(a,c){this.watchUpdater({newValue:a,oldValue:c,prop:b})}))}))},watchUpdater:function watchUpdater(a){var b=this,c=a.newValue,d=a.oldValue,e=a.prop;this.config=(0,_config.updateConfig)(this.config,(0,_defineProperty2.default)({},e,c||d)),this.$nextTick().then((function(){b.updateReadings()}))},renderGauge:function renderGauge(){this.config=(0,_config.getConfig)({PROPS:(0,_props.getProps)(this),parentWidth:this.$el.parentNode.clientWidth,parentHeight:this.$el.parentNode.clientHeight}),(0,_d.select)(this.$el).select("svg").remove(),this.d3_refs=(0,_render.render)({container:this.$el,config:this.config}),(0,_render.update)({d3_refs:this.d3_refs,newValue:this.value,config:this.config})},_updateReadings:function _updateReadings(){this.force_render?this.renderGauge():(0,_render.update)({d3_refs:this.d3_refs,newValue:this.config.value||0,config:this.config})}}};exports.default=_default},1294:function(module,exports,__webpack_require__){"use strict";var _interopRequireDefault=__webpack_require__(73);Object.defineProperty(exports,"__esModule",{value:!0}),exports._renderLabels=_renderLabels,exports.render=exports.update=void 0;var _d=__webpack_require__(111),_isEmpty=_interopRequireDefault(__webpack_require__(436)),_isArray=_interopRequireDefault(__webpack_require__(19)),_util=__webpack_require__(280),_getNeedleTransition=__webpack_require__(1295),_configure=__webpack_require__(1296);exports.update=function(a){var b=a.d3_refs,c=a.newValue,d=a.config,f=(0,_configure.configureScale)(d)(c),g=d.maxAngle-d.minAngle,h=d.minAngle+f*g;b.pointer.transition().duration(d.needleTransitionDuration).ease((0,_getNeedleTransition.getNeedleTransition)(d.needleTransition)).attr("transform","rotate(".concat(h,")")),b.current_value_text.text((0,_util.formatCurrentValueText)(c,d))};function _renderLabels(a){var b=a.config,c=a.svg,d=a.centerTx,e=a.r,f=(0,_configure.configureTicks)(b),g=(0,_configure.configureTickData)(b),h=(0,_configure.configureScale)(b),j=b.maxAngle-b.minAngle,k=b.customSegmentLabels,l=(0,_isArray.default)(k)&&!(0,_isEmpty.default)(k),m=l&&k.length===g.length;if(l&&!m)throw new Error("Custom Segment Labels should be an array with length of ".concat(g.length));l&&m?function _renderCustomSegmentLabels(a){function b(a,b){var d=0===l.length?j(a):(0,_util.sumArrayTill)(h,b);return c.minAngle+d*k}var c=a.config,d=a.svg,e=a.centerTx,f=a.r,g=a.ticks,h=a.tickData,j=a.scale,k=a.range,l=c.customSegmentStops,m=c.customSegmentLabels,n=m.map((function(a,c){var d=c,e=c+1,h=b(g[d],d);return(b(g[e],e)+h)/2})),o=f-c.ringWidth-c.ringInset,p=f-c.ringInset;d.append("g").attr("class","label").attr("transform",e).selectAll("text").data(m).enter().append("text").attr("transform",(function(a,b){var d=n[b],e="rotate(".concat(d,") translate(0, ").concat(c.labelInset-f,")"),g="rotate(".concat(d,") translate(0, ").concat(c.labelInset/2-(p-(p-o)/2),")");return"OUTSIDE"===a.position?e:g})).text((function(a){return a.text||""})).attr("class","segment-value").style("text-anchor","middle").style("font-size",(function(a){return a.fontSize||c.labelFontSize})).style("font-weight","bold").style("fill",(function(a){return a.color||c.textColor}))}({config:b,svg:c,centerTx:d,r:e,ticks:f,tickData:g,scale:h,range:j}):c.append("g").attr("class","label").attr("transform",d).selectAll("text").data(f).enter().append("text").attr("transform",(function(a,c){var d=0===b.customSegmentStops.length?h(a):(0,_util.sumArrayTill)(g,c),f=b.minAngle+d*j;return"rotate(".concat(f,") translate(0, ").concat(b.labelInset-e,")")})).text(b.labelFormat).attr("class","segment-value").style("text-anchor","middle").style("font-size",b.labelFontSize).style("font-weight","bold").style("fill",b.textColor)}function _renderCurrentValueText(a){var b=a.config,c=a.svg,d=(b.width+2*b.paddingHorizontal)/2,e=(b.width+4*b.paddingVertical)/2;return c.append("g").attr("transform","translate(".concat(d,", ").concat(e,")")).append("text").attr("class","current-value").attr("text-anchor","middle").attr("y",23).text(b.currentValue).style("font-size",b.valueTextFontSize).style("font-weight",b.valueTextFontWeight).style("fill",b.textColor)}function _renderNeedle(a){var b=a.config,c=a.svg,d=a.r,e=a.centerTx,f=(0,_util.calculateNeedleHeight)({heightRatio:b.needleHeightRatio,radius:d}),g=[[b.pointerWidth/2,0],[0,-f],[-b.pointerWidth/2,0],[0,b.pointerTailLength],[b.pointerWidth/2,0]],h=(0,_d.line)().curve(_d.curveMonotoneX);return c.append("g").data([g]).attr("class","pointer").attr("transform",e).style("fill",b.needleColor).append("path").attr("d",h).attr("transform","rotate(".concat(b.minAngle,")"))}exports.render=function(a){var b=a.container,c=a.config,d=(0,_util.getRadius)(c),e=(0,_util.centerTranslation)(d,c.paddingHorizontal,c.paddingVertical),f=function _renderSVG(a){var b=a.container,c=a.config,d=c.width+2*c.paddingHorizontal,e=c.height+2*c.paddingVertical;return(0,_d.select)(b).append("svg:svg").attr("class","speedometer").attr("width","".concat(d).concat(c.dimensionUnit)).attr("height","".concat(e).concat(c.dimensionUnit)).style("width","".concat(d).concat(c.dimensionUnit)).style("height","".concat(e).concat(c.dimensionUnit))}({container:b,config:c});return function _renderArcs(a){var b=a.config,c=a.svg,d=a.centerTx,e=(0,_configure.configureTickData)(b),f=(0,_configure.configureArc)(b);c.append("g").attr("class","arc").attr("transform",d).selectAll("path").data(e).enter().append("path").attr("class","speedo-segment").attr("fill",(function(a,c){return!(0,_isEmpty.default)(b.segmentColors)&&b.segmentColors[c]?b.segmentColors[c]:b.arcColorFn(a*c)})).attr("d",f)}({config:c,svg:f,centerTx:e}),_renderLabels({config:c,svg:f,centerTx:e,r:d}),{current_value_text:_renderCurrentValueText({config:c,svg:f}),pointer:_renderNeedle({config:c,svg:f,r:d,centerTx:e})}}},1295:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getNeedleTransition=function getNeedleTransition(a){return a===_enums.Transition.easeLinear?_d.easeLinear:a===_enums.Transition.easeQuadIn?_d.easeQuadIn:a===_enums.Transition.easeQuadOut?_d.easeQuadOut:a===_enums.Transition.easeQuadInOut?_d.easeQuadInOut:a===_enums.Transition.easeCubicIn?_d.easeCubicIn:a===_enums.Transition.easeCubicOut?_d.easeCubicOut:a===_enums.Transition.easeCubicInOut?_d.easeCubicInOut:a===_enums.Transition.easePolyIn?_d.easePolyIn:a===_enums.Transition.easePolyOut?_d.easePolyOut:a===_enums.Transition.easePolyInOut?_d.easePolyInOut:a===_enums.Transition.easeSinIn?_d.easeSinIn:a===_enums.Transition.easeSinOut?_d.easeSinOut:a===_enums.Transition.easeSinInOut?_d.easeSinInOut:a===_enums.Transition.easeExpIn?_d.easeExpIn:a===_enums.Transition.easeExpOut?_d.easeExpOut:a===_enums.Transition.easeExpInOut?_d.easeExpInOut:a===_enums.Transition.easeCircleIn?_d.easeCircleIn:a===_enums.Transition.easeCircleOut?_d.easeCircleOut:a===_enums.Transition.easeCircleInOut?_d.easeCircleInOut:a===_enums.Transition.easeBounceIn?_d.easeBounceIn:a===_enums.Transition.easeBounceOut?_d.easeBounceOut:a===_enums.Transition.easeBounceInOut?_d.easeBounceInOut:a===_enums.Transition.easeBackIn?_d.easeBackIn:a===_enums.Transition.easeBackOut?_d.easeBackOut:a===_enums.Transition.easeBackInOut?_d.easeBackInOut:a===_enums.Transition.easeElasticIn?_d.easeElasticIn:a===_enums.Transition.easeElasticOut?_d.easeElasticOut:a===_enums.Transition.easeElasticInOut?_d.easeElasticInOut:a===_enums.Transition.easeElastic?_d.easeElastic:_d.easeQuadInOut};var _d=__webpack_require__(111),_enums=__webpack_require__(281)},1296:function(module,exports,__webpack_require__){"use strict";var _interopRequireDefault=__webpack_require__(73);Object.defineProperty(exports,"__esModule",{value:!0}),exports.configureArc=exports.configureTickData=exports.configureTicks=exports.configureScale=void 0;var _memoizeOne=_interopRequireDefault(__webpack_require__(1297)),_d=__webpack_require__(111),_util=__webpack_require__(280),configureScale=(0,_memoizeOne.default)((function _configureScale(a){return(0,_util.calculateScale)({min:a.minValue,max:a.maxValue,segments:a.maxSegmentLabels})}));exports.configureScale=configureScale;var configureTicks=(0,_memoizeOne.default)((function _configureTicks(a){var b=configureScale(a),c=(0,_util.calculateTicks)(b,{min:a.minValue,max:a.maxValue,segments:a.maxSegmentLabels});return 0<a.customSegmentStops.length&&0!==a.maxSegmentLabels&&(c=a.customSegmentStops),c}));exports.configureTicks=configureTicks;var configureTickData=(0,_memoizeOne.default)((function _configureTickData(a){var b=(0,_d.range)(a.majorTicks).map((function(){return 1/a.majorTicks}));return(0,_util.calculateSegmentStops)({tickData:b,customSegmentStops:a.customSegmentStops,min:a.minValue,max:a.maxValue})}));exports.configureTickData=configureTickData;var configureArc=(0,_memoizeOne.default)((function _configureArc(a){var b=configureTickData(a),c=a.maxAngle-a.minAngle,d=a.width/2;return(0,_d.arc)().innerRadius(d-a.ringWidth-a.ringInset).outerRadius(d-a.ringInset).startAngle((function(e,d){var f=(0,_util.sumArrayTill)(b,d);return(0,_util.deg2rad)(a.minAngle+f*c)})).endAngle((function(e,d){var f=(0,_util.sumArrayTill)(b,d+1);return(0,_util.deg2rad)(a.minAngle+f*c)}))}));exports.configureArc=configureArc},1298:function(module,exports,__webpack_require__){"use strict";var _interopRequireDefault=__webpack_require__(73);Object.defineProperty(exports,"__esModule",{value:!0}),exports.getProps=function getProps(a){var b=(0,_keys2.default)(prop_types),c={};return(0,_each2.default)(b,(function(b){c[b]=a[b]})),c},exports.getPropKeys=function getPropKeys(){return(0,_keys2.default)(prop_types)},exports.default=void 0;var _defineProperty2=_interopRequireDefault(__webpack_require__(191)),_mapValues=_interopRequireDefault(__webpack_require__(1304)),_keys2=_interopRequireDefault(__webpack_require__(96)),_each2=_interopRequireDefault(__webpack_require__(438)),_config=__webpack_require__(435);function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter((function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable}))),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b,c=1;c<arguments.length;c++)b=null==arguments[c]?{}:arguments[c],c%2?ownKeys(Object(b),!0).forEach((function(c){(0,_defineProperty2.default)(a,c,b[c])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(b)):ownKeys(Object(b)).forEach((function(c){Object.defineProperty(a,c,Object.getOwnPropertyDescriptor(b,c))}));return a}var prop_types={value:{type:Number,required:!0},minValue:{type:Number,required:!0},maxValue:{type:Number,required:!0},forceRender:{type:Boolean,required:!0},width:{type:Number,required:!0},height:{type:Number,required:!0},paddingHorizontal:{type:Number,required:!0},paddingVertical:{type:Number,required:!0},dimensionUnit:{type:String,required:!0},fluidWidth:{type:Boolean,required:!0},segments:{type:Number,required:!0},maxSegmentLabels:{type:Number},customSegmentStops:{type:Array},customSegmentLabels:{type:Array},needleColor:{type:String,required:!0},startColor:{type:String,required:!0},endColor:{type:String,required:!0},segmentColors:{type:Array,required:!0},needleTransition:{type:String,required:!0},needleTransitionDuration:{type:Number,required:!0},needleHeightRatio:{type:Number,required:!0},ringWidth:{type:Number,required:!0},textColor:{type:String,required:!0},valueFormat:{type:String,required:!0},currentValueText:{type:String,required:!0},currentValuePlaceholderStyle:{type:String,required:!0},labelFontSize:{type:String,required:!0},valueTextFontSize:{type:String,required:!0},valueTextFontWeight:{type:String,required:!0}};var _default=(0,_mapValues.default)(prop_types,(function(a,b){return _objectSpread(_objectSpread({},a),{},{default:{customSegmentStops:function customSegmentStops(){return[]},customSegmentLabels:function customSegmentLabels(){return[]},segmentColors:function segmentColors(){return[]}}[b]||_config.DEFAULT_PROPS[b],required:!1})}));exports.default=_default},1299:function(module,exports,__webpack_require__){var map={"./stories/Speedometer.stories.js":437};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1299},1302:function(module,exports,__webpack_require__){"use strict";(function(module){var _vue=__webpack_require__(431);module._StorybookPreserveDecorators=!0,(0,_vue.configure)([__webpack_require__(1303)],module)}).call(this,__webpack_require__(93)(module))},1303:function(module,exports,__webpack_require__){var map={"./Speedometer.stories.js":437};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1303},280:function(module,exports,__webpack_require__){"use strict";var _interopRequireDefault=__webpack_require__(73);Object.defineProperty(exports,"__esModule",{value:!0}),exports.sumArrayTill=function sumArrayTill(a,b){return(0,_sum2.default)((0,_take2.default)(a,b))},exports.calculateSegmentStops=function calculateSegmentStops(a){var b=a.tickData,c=a.customSegmentStops,d=a.min,e=a.max;if(!(0,_isArray.default)(c)||(0,_isEmpty.default)(c))return b;if((0,_head2.default)(c)!==d)throw new Error("First value should be equivalent to min value given. Current min value - ".concat(d));if((0,_last2.default)(c)!==e)throw new Error("Last value should be equivalent to max value given. Current min value - ".concat(e));var f=c.map((function(a,b){return 0===b?void 0:(a-c[b-1])/(e-d)}));return(0,_drop2.default)(f)},exports.calculateNeedleHeight=function calculateNeedleHeight(a){var b=a.heightRatio,c=a.radius;if(0>b||1<b)throw new Error("Invalid needleHeightRatio given - ".concat(b));return Math.round(c*b)},exports.calculateSegmentLabelCount=function calculateSegmentLabelCount(a){var b=a.maxSegmentLabelCount,c=a.segmentCount,d=parseInt(b,10),e=parseInt(c,10);return(0,_isNumber2.default)(d)&&0<=d&&d<=e?d:e},exports.calculateScale=function calculateScale(a){var b=a.min,c=a.max;a.segments;return(0,_d.scaleLinear)().range([0,1]).domain([b,c])},exports.calculateTicks=function calculateTicks(a,b){var c=b.min,d=b.max,e=b.segments,f=[];f=a.ticks(e),((0,_last2.default)(f)!==d||e<f.length)&&1<f.length&&(f=[c],(0,_times2.default)(e,(function(a){f.push(c+(a+1)*((d-c)/e))})));return 1===f.length&&(f=[c,d]),f},exports.formatCurrentValueText=function formatCurrentValueText(a,b){var c=b.labelFormat(a),d=b.currentValuePlaceholderStyle;return b.currentValueText.replace(d,c)},exports.deg2rad=function deg2rad(a){return a*Math.PI/180},exports.centerTranslation=function centerTranslation(a,b,c){return"translate(".concat(a+b,", ").concat(a+c,")")},exports.getRadius=function getRadius(a){return a.width/2};var _isNumber2=_interopRequireDefault(__webpack_require__(1288)),_sum2=_interopRequireDefault(__webpack_require__(1311)),_isEmpty=_interopRequireDefault(__webpack_require__(436)),_isArray=_interopRequireDefault(__webpack_require__(19)),_head2=_interopRequireDefault(__webpack_require__(1289)),_last2=_interopRequireDefault(__webpack_require__(1290)),_drop2=_interopRequireDefault(__webpack_require__(1291)),_times2=_interopRequireDefault(__webpack_require__(1292)),_take2=_interopRequireDefault(__webpack_require__(1293)),_d=__webpack_require__(111)},281:function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Transition=exports.CustomSegmentLabelPosition=void 0;exports.CustomSegmentLabelPosition={Inside:"INSIDE",Outside:"OUTSIDE"};exports.Transition={easeLinear:"easeLinear",easeQuadIn:"easeQuadIn",easeQuadOut:"easeQuadOut",easeQuadInOut:"easeQuadInOut",easeCubicIn:"easeCubicIn",easeCubicOut:"easeCubicOut",easeCubicInOut:"easeCubicInOut",easePolyIn:"easePolyIn",easePolyOut:"easePolyOut",easePolyInOut:"easePolyInOut",easeSinIn:"easeSinIn",easeSinOut:"easeSinOut",easeSinInOut:"easeSinInOut",easeExpIn:"easeExpIn",easeExpOut:"easeExpOut",easeExpInOut:"easeExpInOut",easeCircleIn:"easeCircleIn",easeCircleOut:"easeCircleOut",easeCircleInOut:"easeCircleInOut",easeBounceIn:"easeBounceIn",easeBounceOut:"easeBounceOut",easeBounceInOut:"easeBounceInOut",easeBackIn:"easeBackIn",easeBackOut:"easeBackOut",easeBackInOut:"easeBackInOut",easeElasticIn:"easeElasticIn",easeElasticOut:"easeElasticOut",easeElasticInOut:"easeElasticInOut",easeElastic:"easeElastic"}},435:function(module,exports,__webpack_require__){"use strict";var _interopRequireDefault=__webpack_require__(73);Object.defineProperty(exports,"__esModule",{value:!0}),exports.updateConfig=exports.getConfig=exports.DEFAULT_PROPS=void 0;var _defineProperty2=_interopRequireDefault(__webpack_require__(191)),_d=__webpack_require__(111),_util=__webpack_require__(280);function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter((function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable}))),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b,c=1;c<arguments.length;c++)b=null==arguments[c]?{}:arguments[c],c%2?ownKeys(Object(b),!0).forEach((function(c){(0,_defineProperty2.default)(a,c,b[c])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(b)):ownKeys(Object(b)).forEach((function(c){Object.defineProperty(a,c,Object.getOwnPropertyDescriptor(b,c))}));return a}var DEFAULT_PROPS={value:0,minValue:0,maxValue:1e3,forceRender:!1,width:300,height:300,paddingHorizontal:0,paddingVertical:0,fluidWidth:!1,dimensionUnit:"px",segments:5,maxSegmentLabels:-1,customSegmentStops:[],customSegmentLabels:[],needleColor:"steelblue",startColor:"#FF471A",endColor:"#33CC33",segmentColors:[],needleTransition:__webpack_require__(281).Transition.easeQuadInOut,needleTransitionDuration:500,needleHeightRatio:.9,ringWidth:60,textColor:"#666",valueFormat:"",currentValueText:"${value}",currentValuePlaceholderStyle:"${value}",labelFontSize:"14px",valueTextFontSize:"16px",valueTextFontWeight:"bold"};exports.DEFAULT_PROPS=DEFAULT_PROPS;var DEFAULT_CONFIG={ringInset:20,pointerWidth:10,pointerTailLength:5,minAngle:-90,maxAngle:90,labelInset:10};exports.getConfig=function(a){var b=a.PROPS,c=a.parentWidth,d=a.parentHeight,e={width:b.fluidWidth?c:b.width,height:b.fluidWidth?d:b.height,paddingHorizontal:b.paddingHorizontal,paddingVertical:b.paddingVertical,dimensionUnit:b.dimensionUnit,ringWidth:b.ringWidth,minValue:b.minValue,maxValue:b.maxValue,needleColor:b.needleColor,majorTicks:b.segments,customSegmentStops:b.customSegmentStops,customSegmentLabels:b.customSegmentLabels,maxSegmentLabels:(0,_util.calculateSegmentLabelCount)({maxSegmentLabelCount:b.maxSegmentLabels,segmentCount:b.segments}),segmentColors:b.segmentColors,arcColorFn:0<b.segmentColors.length?(0,_d.scaleQuantize)(b.segmentColors):(0,_d.interpolateHsl)((0,_d.rgb)(b.startColor),(0,_d.rgb)(b.endColor)),needleTransition:b.needleTransition,needleTransitionDuration:b.needleTransitionDuration,needleHeightRatio:b.needleHeightRatio,textColor:b.textColor,labelFormat:(0,_d.format)(b.valueFormat),currentValueText:b.currentValueText,currentValuePlaceholderStyle:b.currentValuePlaceholderStyle,labelFontSize:b.labelFontSize,valueTextFontSize:b.valueTextFontSize,valueTextFontWeight:b.valueTextFontWeight};return Object.assign({},DEFAULT_CONFIG,e)};exports.updateConfig=function(a,b){return _objectSpread(_objectSpread({},a),b)}},437:function(module,exports,__webpack_require__){"use strict";var _interopRequireDefault=__webpack_require__(73);Object.defineProperty(exports,"__esModule",{value:!0}),exports.CustomizeFontSizesAndSpacing=exports.NormalUpdationOfValues=exports.NoSegmentLabels=exports.GradientEffectWithLargeNumberOfSegmentsAndMaxSegmentLabelsConfig=exports.ConfigureNeedleLengthAndFontSizes=exports.CustomCurrentValuePlaceholderStyleForEgValue=exports.CustomCurrentValueText=exports.ConfiguringTheFormatForValuesDisplayed=exports.ForceRenderTheComponent=exports.NeedleTransitionDuration=exports.FluidWidthView=exports.CustomSegmentStops=exports.CustomSegmentColors=exports.CustomSegmentLabels=exports.ConfiguringValues=exports.DefaultWithNoConfig=exports.default=void 0;var _defineProperty2=_interopRequireDefault(__webpack_require__(191)),addSourceDecorator=(__webpack_require__(192).withSource,__webpack_require__(192).addSource),__SOURCE_PREFIX__=(__webpack_require__(192).withSource,addSourceDecorator=__webpack_require__(192).addSource,"/Users/arun/play/github/mine/vue-speedometer/src/stories"),__STORY__='// IMPORTANT: checkout `.storybook/preview.js` to switch between DEV and DIST/PROD builds\n\nexport default { title: "vue-speedometer" }\n\nconst textColor = "#AAA"\n\nexport const DefaultWithNoConfig = () =>\n  `<vue-speedometer textColor="${textColor}" />`\n\nexport const ConfiguringValues = () =>\n  `<vue-speedometer :value="333" textColor="${textColor}" />`\n\nexport const CustomSegmentLabels = () => `\n  <div>\n    <vue-speedometer \n      :width="500"\n      :needleHeightRatio="0.7"\n      :value="777"\n      currentValueText="Happiness Level"\n      :customSegmentLabels=\'[\n        {\n          text: "Very Bad",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Bad",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Ok",\n          position: "INSIDE",\n          color: "#555",\n          fontSize: "19px",\n        },\n        {\n          text: "Good",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Very Good",\n          position: "INSIDE",\n          color: "#555",\n        },\n      ]\'\n      :ringWidth="47"\n      :needleTransitionDuration="3333"\n      needleTransition="easeElastic"\n      needleColor="#a7ff83"\n      textColor="#d8dee9"\n    />\n    <vue-speedometer \n      :width="500"\n      :needleHeightRatio="0.7"\n      :value="777"\n      :customSegmentStops=\'[0, 250, 750, 1000]\'\n      :segmentColors=\'["#9399ff", "#14ffec", "#00bbf0"]\'\n      currentValueText="How are you?"\n      :customSegmentLabels=\'[\n        {\n          text: "Good",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n        {\n          text: "Great",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n        {\n          text: "Awesome!",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n      ]\'\n      :ringWidth="47"\n      :needleTransitionDuration="3333"\n      needleTransition="easeElastic"\n      needleColor="#a7ff83"\n      textColor="#d8dee9"\n    />\n  </div>\n`\n\nexport const CustomSegmentColors = () => `\n  <div>\n    <vue-speedometer \n      :maxSegmentLabels="12"\n      :segments="3"\n      :value="470"\n      :segmentColors=\'["#0055A4", "#ECEFF4", "#EF4135"]\'\n      needleColor=\'#000080\' \n      textColor="${textColor}"\n    />\n    <vue-speedometer\n      :maxSegmentLabels="12"\n      :segments="3"\n      :value="470"\n      :segmentColors=\'["tomato", "gold", "limegreen"]\'\n      needleColor="lightgreen"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const CustomSegmentStops = () => `\n  <div>\n    <vue-speedometer \n      :needleHeightRatio="0.7"\n      :maxSegmentLabels="5"\n      :segments="3"\n      :customSegmentStops="[0, 500, 750, 900, 1000]"\n      :segmentColors=\'["firebrick", "tomato", "gold", "limegreen"]\'\n      :value="333"\n      textColor="${textColor}"\n    />\n    <vue-speedometer \n      :forceRender="true"\n      :maxSegmentLabels="1"\n      :customSegmentStops="[0, 777, 1000]"\n      :segmentColors=\'["#5959ac", "#AAA"]\'\n      needleColor="#5959ac"\n      :currentValueText=\'"Current Value: \\${value}"\'\n      :value="777"\n      textColor="${textColor}"\n    />\n    <vue-speedometer \n      :maxSegmentLabels="1"\n      :customSegmentStops="[-120, -100, 0]"\n      :segmentColors=\'["tomato", "gold"]\'\n      needleColor="#5959ac"\n      :currentValueText=\'"Current Value: \\${value}"\'\n      :value="-100"\n      :minValue="-120"\n      :maxValue="0"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const FluidWidthView = () => ({\n  data() {\n    return {\n      styles: {\n        width: "500px",\n        height: "300px",\n        background: "#2a2744",\n      },\n    }\n  },\n  template: `\n    <div :style="styles">\n      <vue-speedometer \n        :fluidWidth="true"\n        :minValue="100"\n        :maxValue="500"\n        :value="473"\n        needleColor="steelblue"\n        textColor="${textColor}"\n      />\n      <div style="color: ${textColor}">\n      Fluid width takes the width of the parent div (<strong>500px</strong> in this case)\n      </div>\n    </div>\n  `,\n})\n\nexport const NeedleTransitionDuration = () => `\n  <div>\n    <vue-speedometer \n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      textColor="${textColor}"\n    />\n    <vue-speedometer \n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="3000"\n      needleTransition="easeQuadInOut"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const ForceRenderTheComponent = () => ({\n  data() {\n    return {\n      buttonStyles: {\n        padding: "7px",\n        border: "thin solid steelblue",\n        background: "white",\n        cursor: "pointer",\n        marginBottom: "17px",\n      },\n      value1: {\n        value: 111,\n        startColor: "blue",\n        segments: 5,\n        width: 300,\n        height: 300,\n        currentValueText: "${value}",\n      },\n      value2: {\n        value: 222,\n        startColor: "orange",\n        segments: 10,\n        width: 400,\n        height: 400,\n        currentValueText: "Current Value: ${value}",\n      },\n      toggleStatus: false,\n    }\n  },\n  methods: {\n    onClick: function () {\n      this.toggleStatus = !this.toggleStatus\n    },\n  },\n  template: `\n    <div style="background: #2a2744">\n    <div style="color: ${textColor}">\n      By default, on props change only the current value and needle transition is updated. \n      Force render completly re-renders the whole component on update. \n      This is helpful for features like dynmaic width/height on resize\n      </div>\n      <hr />\n      <button @click="onClick" :style="buttonStyles">\n        <strong>Click Here to force render props</strong>\n      </button>\n      \n      <vue-speedometer\n        :value="toggleStatus ? value1.value : value2.value"\n        :startColor="toggleStatus ? value1.startColor : value2.startColor"\n        :forceRender="true"\n        :segments="toggleStatus ? value1.segments : value2.segments"\n        :width="toggleStatus ? value1.width : value2.width"\n        :height="toggleStatus ? value1.height : value2.height"\n        :currentValueText="toggleStatus ? value1.currentValueText : value2.currentValueText"\n        textColor="${textColor}"\n      />\n    </div>\n`,\n})\n\nexport const ConfiguringTheFormatForValuesDisplayed = () => `\n  <div>\n    <vue-speedometer\n      :maxValue="150"\n      :value="70.7"\n      valueFormat="d"\n      :customSegmentStops="[0, 50, 70, 90, 150]"\n      :segmentColors=\'["#bf616a", "#d08770", "#ebcb8b", "#a3be8c"]\'\n      textColor="${textColor}"\n    />\n    <vue-speedometer\n      :maxValue="150"\n      :value="70.7"\n      :segments="5"\n      valueFormat="d"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const CustomCurrentValueText = () => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      currentValueText="Current Value: \\${value}"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const CustomCurrentValuePlaceholderStyleForEgValue = () => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      currentValueText="Current Value: #{value}"\n      currentValuePlaceholderStyle="#{value}"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const ConfigureNeedleLengthAndFontSizes = () => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      :needleHeightRatio="0.5"\n      labelFontSize="15px"\n      valueTextFontSize="23px"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const GradientEffectWithLargeNumberOfSegmentsAndMaxSegmentLabelsConfig = () => `\n  <div>\n    <vue-speedometer\n      :needleHeightRatio="0.7"\n      :maxSegmentLabels="5"\n      :segments="75"\n      :value="333"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const NoSegmentLabels = () => `\n  <div>\n    <vue-speedometer\n      :maxSegmentLabels="0" \n      :segments="75"\n      textColor="${textColor}"\n    />\n    <vue-speedometer\n      :maxSegmentLabels="0"\n      :segments="4"\n      :value="333"\n      startColor="#2E3440"\n      endColor="#4C566A"\n      needleColor="#D8DEE9"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const NormalUpdationOfValues = () => ({\n  created() {\n    window.setInterval(() => {\n      this.toggle = !this.toggle\n    }, 3000)\n  },\n  data() {\n    return {\n      toggle: false,\n    }\n  },\n  template: `\n    <div>\n      <vue-speedometer\n        :maxSegmentLabels="0" \n        :segments="75"\n        :value="toggle ? 333 : 555"\n        needleTransition="easeElastic"\n        :needleTransitionDuration="3333"\n        textColor="${textColor}"\n      />\n      <vue-speedometer\n        :maxSegmentLabels="0"\n        :segments="4"\n        :value="toggle ? 333 : 555"\n        startColor="#2E3440"\n        endColor="#4C566A"\n        needleColor="#D8DEE9"\n        textColor="${textColor}"\n      />\n    </div>\n  `,\n})\n\nexport const CustomizeFontSizesAndSpacing = () => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      :needleHeightRatio="0.5"\n      labelFontSize="31px"\n      valueTextFontSize="37px"\n      valueTextFontWeight="500"\n      :paddingHorizontal="17"\n      :paddingVertical="17"\n      currentValueText="Value: \\${value}"\n      textColor="${textColor}"\n    />\n  </div>\n`\n',__ADDS_MAP__={"vue-speedometer--default-with-no-config":{startLoc:{col:35,line:7},endLoc:{col:48,line:8},startBody:{col:35,line:7},endBody:{col:48,line:8}},"vue-speedometer--configuring-values":{startLoc:{col:33,line:10},endLoc:{col:61,line:11},startBody:{col:33,line:10},endBody:{col:61,line:11}},"vue-speedometer--custom-segment-labels":{startLoc:{col:35,line:13},endLoc:{col:1,line:85},startBody:{col:35,line:13},endBody:{col:1,line:85}},"vue-speedometer--custom-segment-colors":{startLoc:{col:35,line:87},endLoc:{col:1,line:106},startBody:{col:35,line:87},endBody:{col:1,line:106}},"vue-speedometer--custom-segment-stops":{startLoc:{col:34,line:108},endLoc:{col:1,line:141},startBody:{col:34,line:108},endBody:{col:1,line:141}},"vue-speedometer--fluid-width-view":{startLoc:{col:30,line:143},endLoc:{col:2,line:168},startBody:{col:30,line:143},endBody:{col:2,line:168}},"vue-speedometer--needle-transition-duration":{startLoc:{col:40,line:170},endLoc:{col:1,line:187},startBody:{col:40,line:170},endBody:{col:1,line:187}},"vue-speedometer--force-render-the-component":{startLoc:{col:39,line:189},endLoc:{col:2,line:247},startBody:{col:39,line:189},endBody:{col:2,line:247}},"vue-speedometer--configuring-the-format-for-values-displayed":{startLoc:{col:54,line:249},endLoc:{col:1,line:267},startBody:{col:54,line:249},endBody:{col:1,line:267}},"vue-speedometer--custom-current-value-text":{startLoc:{col:38,line:269},endLoc:{col:1,line:280},startBody:{col:38,line:269},endBody:{col:1,line:280}},"vue-speedometer--custom-current-value-placeholder-style-for-eg-value":{startLoc:{col:60,line:282},endLoc:{col:1,line:294},startBody:{col:60,line:282},endBody:{col:1,line:294}},"vue-speedometer--configure-needle-length-and-font-sizes":{startLoc:{col:49,line:296},endLoc:{col:1,line:306},startBody:{col:49,line:296},endBody:{col:1,line:306}},"vue-speedometer--gradient-effect-with-large-number-of-segments-and-max-segment-labels-config":{startLoc:{col:80,line:308},endLoc:{col:1,line:318},startBody:{col:80,line:308},endBody:{col:1,line:318}},"vue-speedometer--no-segment-labels":{startLoc:{col:31,line:320},endLoc:{col:1,line:337},startBody:{col:31,line:320},endBody:{col:1,line:337}},"vue-speedometer--normal-updation-of-values":{startLoc:{col:38,line:339},endLoc:{col:2,line:371},startBody:{col:38,line:339},endBody:{col:2,line:371}},"vue-speedometer--customize-font-sizes-and-spacing":{startLoc:{col:44,line:373},endLoc:{col:1,line:387},startBody:{col:44,line:373},endBody:{col:1,line:387}}},__MAIN_FILE_LOCATION__="/Speedometer.stories.js",__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},_default={parameters:(0,_defineProperty2.default)({storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/arun/play/github/mine/vue-speedometer/src/stories";\n// @ts-ignore\nvar __STORY__ = "// IMPORTANT: checkout `.storybook/preview.js` to switch between DEV and DIST/PROD builds\\n\\nexport default { title: \\"vue-speedometer\\" }\\n\\nconst textColor = \\"#AAA\\"\\n\\nexport const DefaultWithNoConfig = () =>\\n  `<vue-speedometer textColor=\\"${textColor}\\" />`\\n\\nexport const ConfiguringValues = () =>\\n  `<vue-speedometer :value=\\"333\\" textColor=\\"${textColor}\\" />`\\n\\nexport const CustomSegmentLabels = () => `\\n  <div>\\n    <vue-speedometer \\n      :width=\\"500\\"\\n      :needleHeightRatio=\\"0.7\\"\\n      :value=\\"777\\"\\n      currentValueText=\\"Happiness Level\\"\\n      :customSegmentLabels=\'[\\n        {\\n          text: \\"Very Bad\\",\\n          position: \\"INSIDE\\",\\n          color: \\"#555\\",\\n        },\\n        {\\n          text: \\"Bad\\",\\n          position: \\"INSIDE\\",\\n          color: \\"#555\\",\\n        },\\n        {\\n          text: \\"Ok\\",\\n          position: \\"INSIDE\\",\\n          color: \\"#555\\",\\n          fontSize: \\"19px\\",\\n        },\\n        {\\n          text: \\"Good\\",\\n          position: \\"INSIDE\\",\\n          color: \\"#555\\",\\n        },\\n        {\\n          text: \\"Very Good\\",\\n          position: \\"INSIDE\\",\\n          color: \\"#555\\",\\n        },\\n      ]\'\\n      :ringWidth=\\"47\\"\\n      :needleTransitionDuration=\\"3333\\"\\n      needleTransition=\\"easeElastic\\"\\n      needleColor=\\"#a7ff83\\"\\n      textColor=\\"#d8dee9\\"\\n    />\\n    <vue-speedometer \\n      :width=\\"500\\"\\n      :needleHeightRatio=\\"0.7\\"\\n      :value=\\"777\\"\\n      :customSegmentStops=\'[0, 250, 750, 1000]\'\\n      :segmentColors=\'[\\"#9399ff\\", \\"#14ffec\\", \\"#00bbf0\\"]\'\\n      currentValueText=\\"How are you?\\"\\n      :customSegmentLabels=\'[\\n        {\\n          text: \\"Good\\",\\n          position: \\"OUTSIDE\\",\\n          color: \\"#d8dee9\\",\\n        },\\n        {\\n          text: \\"Great\\",\\n          position: \\"OUTSIDE\\",\\n          color: \\"#d8dee9\\",\\n        },\\n        {\\n          text: \\"Awesome!\\",\\n          position: \\"OUTSIDE\\",\\n          color: \\"#d8dee9\\",\\n        },\\n      ]\'\\n      :ringWidth=\\"47\\"\\n      :needleTransitionDuration=\\"3333\\"\\n      needleTransition=\\"easeElastic\\"\\n      needleColor=\\"#a7ff83\\"\\n      textColor=\\"#d8dee9\\"\\n    />\\n  </div>\\n`\\n\\nexport const CustomSegmentColors = () => `\\n  <div>\\n    <vue-speedometer \\n      :maxSegmentLabels=\\"12\\"\\n      :segments=\\"3\\"\\n      :value=\\"470\\"\\n      :segmentColors=\'[\\"#0055A4\\", \\"#ECEFF4\\", \\"#EF4135\\"]\'\\n      needleColor=\'#000080\' \\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer\\n      :maxSegmentLabels=\\"12\\"\\n      :segments=\\"3\\"\\n      :value=\\"470\\"\\n      :segmentColors=\'[\\"tomato\\", \\"gold\\", \\"limegreen\\"]\'\\n      needleColor=\\"lightgreen\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const CustomSegmentStops = () => `\\n  <div>\\n    <vue-speedometer \\n      :needleHeightRatio=\\"0.7\\"\\n      :maxSegmentLabels=\\"5\\"\\n      :segments=\\"3\\"\\n      :customSegmentStops=\\"[0, 500, 750, 900, 1000]\\"\\n      :segmentColors=\'[\\"firebrick\\", \\"tomato\\", \\"gold\\", \\"limegreen\\"]\'\\n      :value=\\"333\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer \\n      :forceRender=\\"true\\"\\n      :maxSegmentLabels=\\"1\\"\\n      :customSegmentStops=\\"[0, 777, 1000]\\"\\n      :segmentColors=\'[\\"#5959ac\\", \\"#AAA\\"]\'\\n      needleColor=\\"#5959ac\\"\\n      :currentValueText=\'\\"Current Value: \\\\${value}\\"\'\\n      :value=\\"777\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer \\n      :maxSegmentLabels=\\"1\\"\\n      :customSegmentStops=\\"[-120, -100, 0]\\"\\n      :segmentColors=\'[\\"tomato\\", \\"gold\\"]\'\\n      needleColor=\\"#5959ac\\"\\n      :currentValueText=\'\\"Current Value: \\\\${value}\\"\'\\n      :value=\\"-100\\"\\n      :minValue=\\"-120\\"\\n      :maxValue=\\"0\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const FluidWidthView = () => ({\\n  data() {\\n    return {\\n      styles: {\\n        width: \\"500px\\",\\n        height: \\"300px\\",\\n        background: \\"#2a2744\\",\\n      },\\n    }\\n  },\\n  template: `\\n    <div :style=\\"styles\\">\\n      <vue-speedometer \\n        :fluidWidth=\\"true\\"\\n        :minValue=\\"100\\"\\n        :maxValue=\\"500\\"\\n        :value=\\"473\\"\\n        needleColor=\\"steelblue\\"\\n        textColor=\\"${textColor}\\"\\n      />\\n      <div style=\\"color: ${textColor}\\">\\n      Fluid width takes the width of the parent div (<strong>500px</strong> in this case)\\n      </div>\\n    </div>\\n  `,\\n})\\n\\nexport const NeedleTransitionDuration = () => `\\n  <div>\\n    <vue-speedometer \\n      :value=\\"333\\"\\n      needleColor=\\"steelblue\\"\\n      :needleTransitionDuration=\\"4000\\"\\n      needleTransition=\\"easeElastic\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer \\n      :value=\\"333\\"\\n      needleColor=\\"steelblue\\"\\n      :needleTransitionDuration=\\"3000\\"\\n      needleTransition=\\"easeQuadInOut\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const ForceRenderTheComponent = () => ({\\n  data() {\\n    return {\\n      buttonStyles: {\\n        padding: \\"7px\\",\\n        border: \\"thin solid steelblue\\",\\n        background: \\"white\\",\\n        cursor: \\"pointer\\",\\n        marginBottom: \\"17px\\",\\n      },\\n      value1: {\\n        value: 111,\\n        startColor: \\"blue\\",\\n        segments: 5,\\n        width: 300,\\n        height: 300,\\n        currentValueText: \\"${value}\\",\\n      },\\n      value2: {\\n        value: 222,\\n        startColor: \\"orange\\",\\n        segments: 10,\\n        width: 400,\\n        height: 400,\\n        currentValueText: \\"Current Value: ${value}\\",\\n      },\\n      toggleStatus: false,\\n    }\\n  },\\n  methods: {\\n    onClick: function () {\\n      this.toggleStatus = !this.toggleStatus\\n    },\\n  },\\n  template: `\\n    <div style=\\"background: #2a2744\\">\\n    <div style=\\"color: ${textColor}\\">\\n      By default, on props change only the current value and needle transition is updated. \\n      Force render completly re-renders the whole component on update. \\n      This is helpful for features like dynmaic width/height on resize\\n      </div>\\n      <hr />\\n      <button @click=\\"onClick\\" :style=\\"buttonStyles\\">\\n        <strong>Click Here to force render props</strong>\\n      </button>\\n      \\n      <vue-speedometer\\n        :value=\\"toggleStatus ? value1.value : value2.value\\"\\n        :startColor=\\"toggleStatus ? value1.startColor : value2.startColor\\"\\n        :forceRender=\\"true\\"\\n        :segments=\\"toggleStatus ? value1.segments : value2.segments\\"\\n        :width=\\"toggleStatus ? value1.width : value2.width\\"\\n        :height=\\"toggleStatus ? value1.height : value2.height\\"\\n        :currentValueText=\\"toggleStatus ? value1.currentValueText : value2.currentValueText\\"\\n        textColor=\\"${textColor}\\"\\n      />\\n    </div>\\n`,\\n})\\n\\nexport const ConfiguringTheFormatForValuesDisplayed = () => `\\n  <div>\\n    <vue-speedometer\\n      :maxValue=\\"150\\"\\n      :value=\\"70.7\\"\\n      valueFormat=\\"d\\"\\n      :customSegmentStops=\\"[0, 50, 70, 90, 150]\\"\\n      :segmentColors=\'[\\"#bf616a\\", \\"#d08770\\", \\"#ebcb8b\\", \\"#a3be8c\\"]\'\\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer\\n      :maxValue=\\"150\\"\\n      :value=\\"70.7\\"\\n      :segments=\\"5\\"\\n      valueFormat=\\"d\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const CustomCurrentValueText = () => `\\n  <div>\\n    <vue-speedometer\\n      :value=\\"333\\"\\n      needleColor=\\"steelblue\\"\\n      :needleTransitionDuration=\\"4000\\"\\n      needleTransition=\\"easeElastic\\"\\n      currentValueText=\\"Current Value: \\\\${value}\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const CustomCurrentValuePlaceholderStyleForEgValue = () => `\\n  <div>\\n    <vue-speedometer\\n      :value=\\"333\\"\\n      needleColor=\\"steelblue\\"\\n      :needleTransitionDuration=\\"4000\\"\\n      needleTransition=\\"easeElastic\\"\\n      currentValueText=\\"Current Value: #{value}\\"\\n      currentValuePlaceholderStyle=\\"#{value}\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const ConfigureNeedleLengthAndFontSizes = () => `\\n  <div>\\n    <vue-speedometer\\n      :value=\\"333\\"\\n      :needleHeightRatio=\\"0.5\\"\\n      labelFontSize=\\"15px\\"\\n      valueTextFontSize=\\"23px\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const GradientEffectWithLargeNumberOfSegmentsAndMaxSegmentLabelsConfig = () => `\\n  <div>\\n    <vue-speedometer\\n      :needleHeightRatio=\\"0.7\\"\\n      :maxSegmentLabels=\\"5\\"\\n      :segments=\\"75\\"\\n      :value=\\"333\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const NoSegmentLabels = () => `\\n  <div>\\n    <vue-speedometer\\n      :maxSegmentLabels=\\"0\\" \\n      :segments=\\"75\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer\\n      :maxSegmentLabels=\\"0\\"\\n      :segments=\\"4\\"\\n      :value=\\"333\\"\\n      startColor=\\"#2E3440\\"\\n      endColor=\\"#4C566A\\"\\n      needleColor=\\"#D8DEE9\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const NormalUpdationOfValues = () => ({\\n  created() {\\n    window.setInterval(() => {\\n      this.toggle = !this.toggle\\n    }, 3000)\\n  },\\n  data() {\\n    return {\\n      toggle: false,\\n    }\\n  },\\n  template: `\\n    <div>\\n      <vue-speedometer\\n        :maxSegmentLabels=\\"0\\" \\n        :segments=\\"75\\"\\n        :value=\\"toggle ? 333 : 555\\"\\n        needleTransition=\\"easeElastic\\"\\n        :needleTransitionDuration=\\"3333\\"\\n        textColor=\\"${textColor}\\"\\n      />\\n      <vue-speedometer\\n        :maxSegmentLabels=\\"0\\"\\n        :segments=\\"4\\"\\n        :value=\\"toggle ? 333 : 555\\"\\n        startColor=\\"#2E3440\\"\\n        endColor=\\"#4C566A\\"\\n        needleColor=\\"#D8DEE9\\"\\n        textColor=\\"${textColor}\\"\\n      />\\n    </div>\\n  `,\\n})\\n\\nexport const CustomizeFontSizesAndSpacing = () => `\\n  <div>\\n    <vue-speedometer\\n      :value=\\"333\\"\\n      :needleHeightRatio=\\"0.5\\"\\n      labelFontSize=\\"31px\\"\\n      valueTextFontSize=\\"37px\\"\\n      valueTextFontWeight=\\"500\\"\\n      :paddingHorizontal=\\"17\\"\\n      :paddingVertical=\\"17\\"\\n      currentValueText=\\"Value: \\\\${value}\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"vue-speedometer--default-with-no-config":{"startLoc":{"col":35,"line":7},"endLoc":{"col":48,"line":8},"startBody":{"col":35,"line":7},"endBody":{"col":48,"line":8}},"vue-speedometer--configuring-values":{"startLoc":{"col":33,"line":10},"endLoc":{"col":61,"line":11},"startBody":{"col":33,"line":10},"endBody":{"col":61,"line":11}},"vue-speedometer--custom-segment-labels":{"startLoc":{"col":35,"line":13},"endLoc":{"col":1,"line":85},"startBody":{"col":35,"line":13},"endBody":{"col":1,"line":85}},"vue-speedometer--custom-segment-colors":{"startLoc":{"col":35,"line":87},"endLoc":{"col":1,"line":106},"startBody":{"col":35,"line":87},"endBody":{"col":1,"line":106}},"vue-speedometer--custom-segment-stops":{"startLoc":{"col":34,"line":108},"endLoc":{"col":1,"line":141},"startBody":{"col":34,"line":108},"endBody":{"col":1,"line":141}},"vue-speedometer--fluid-width-view":{"startLoc":{"col":30,"line":143},"endLoc":{"col":2,"line":168},"startBody":{"col":30,"line":143},"endBody":{"col":2,"line":168}},"vue-speedometer--needle-transition-duration":{"startLoc":{"col":40,"line":170},"endLoc":{"col":1,"line":187},"startBody":{"col":40,"line":170},"endBody":{"col":1,"line":187}},"vue-speedometer--force-render-the-component":{"startLoc":{"col":39,"line":189},"endLoc":{"col":2,"line":247},"startBody":{"col":39,"line":189},"endBody":{"col":2,"line":247}},"vue-speedometer--configuring-the-format-for-values-displayed":{"startLoc":{"col":54,"line":249},"endLoc":{"col":1,"line":267},"startBody":{"col":54,"line":249},"endBody":{"col":1,"line":267}},"vue-speedometer--custom-current-value-text":{"startLoc":{"col":38,"line":269},"endLoc":{"col":1,"line":280},"startBody":{"col":38,"line":269},"endBody":{"col":1,"line":280}},"vue-speedometer--custom-current-value-placeholder-style-for-eg-value":{"startLoc":{"col":60,"line":282},"endLoc":{"col":1,"line":294},"startBody":{"col":60,"line":282},"endBody":{"col":1,"line":294}},"vue-speedometer--configure-needle-length-and-font-sizes":{"startLoc":{"col":49,"line":296},"endLoc":{"col":1,"line":306},"startBody":{"col":49,"line":296},"endBody":{"col":1,"line":306}},"vue-speedometer--gradient-effect-with-large-number-of-segments-and-max-segment-labels-config":{"startLoc":{"col":80,"line":308},"endLoc":{"col":1,"line":318},"startBody":{"col":80,"line":308},"endBody":{"col":1,"line":318}},"vue-speedometer--no-segment-labels":{"startLoc":{"col":31,"line":320},"endLoc":{"col":1,"line":337},"startBody":{"col":31,"line":320},"endBody":{"col":1,"line":337}},"vue-speedometer--normal-updation-of-values":{"startLoc":{"col":38,"line":339},"endLoc":{"col":2,"line":371},"startBody":{"col":38,"line":339},"endBody":{"col":2,"line":371}},"vue-speedometer--customize-font-sizes-and-spacing":{"startLoc":{"col":44,"line":373},"endLoc":{"col":1,"line":387},"startBody":{"col":44,"line":373},"endBody":{"col":1,"line":387}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/Speedometer.stories.js";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n// IMPORTANT: checkout `.storybook/preview.js` to switch between DEV and DIST/PROD builds\n\nexport default {parameters: {"storySource":{"source":"// IMPORTANT: checkout `.storybook/preview.js` to switch between DEV and DIST/PROD builds\\n\\nexport default { title: \\"vue-speedometer\\" }\\n\\nconst textColor = \\"#AAA\\"\\n\\nexport const DefaultWithNoConfig = () =>\\n  `<vue-speedometer textColor=\\"${textColor}\\" />`\\n\\nexport const ConfiguringValues = () =>\\n  `<vue-speedometer :value=\\"333\\" textColor=\\"${textColor}\\" />`\\n\\nexport const CustomSegmentLabels = () => `\\n  <div>\\n    <vue-speedometer \\n      :width=\\"500\\"\\n      :needleHeightRatio=\\"0.7\\"\\n      :value=\\"777\\"\\n      currentValueText=\\"Happiness Level\\"\\n      :customSegmentLabels=\'[\\n        {\\n          text: \\"Very Bad\\",\\n          position: \\"INSIDE\\",\\n          color: \\"#555\\",\\n        },\\n        {\\n          text: \\"Bad\\",\\n          position: \\"INSIDE\\",\\n          color: \\"#555\\",\\n        },\\n        {\\n          text: \\"Ok\\",\\n          position: \\"INSIDE\\",\\n          color: \\"#555\\",\\n          fontSize: \\"19px\\",\\n        },\\n        {\\n          text: \\"Good\\",\\n          position: \\"INSIDE\\",\\n          color: \\"#555\\",\\n        },\\n        {\\n          text: \\"Very Good\\",\\n          position: \\"INSIDE\\",\\n          color: \\"#555\\",\\n        },\\n      ]\'\\n      :ringWidth=\\"47\\"\\n      :needleTransitionDuration=\\"3333\\"\\n      needleTransition=\\"easeElastic\\"\\n      needleColor=\\"#a7ff83\\"\\n      textColor=\\"#d8dee9\\"\\n    />\\n    <vue-speedometer \\n      :width=\\"500\\"\\n      :needleHeightRatio=\\"0.7\\"\\n      :value=\\"777\\"\\n      :customSegmentStops=\'[0, 250, 750, 1000]\'\\n      :segmentColors=\'[\\"#9399ff\\", \\"#14ffec\\", \\"#00bbf0\\"]\'\\n      currentValueText=\\"How are you?\\"\\n      :customSegmentLabels=\'[\\n        {\\n          text: \\"Good\\",\\n          position: \\"OUTSIDE\\",\\n          color: \\"#d8dee9\\",\\n        },\\n        {\\n          text: \\"Great\\",\\n          position: \\"OUTSIDE\\",\\n          color: \\"#d8dee9\\",\\n        },\\n        {\\n          text: \\"Awesome!\\",\\n          position: \\"OUTSIDE\\",\\n          color: \\"#d8dee9\\",\\n        },\\n      ]\'\\n      :ringWidth=\\"47\\"\\n      :needleTransitionDuration=\\"3333\\"\\n      needleTransition=\\"easeElastic\\"\\n      needleColor=\\"#a7ff83\\"\\n      textColor=\\"#d8dee9\\"\\n    />\\n  </div>\\n`\\n\\nexport const CustomSegmentColors = () => `\\n  <div>\\n    <vue-speedometer \\n      :maxSegmentLabels=\\"12\\"\\n      :segments=\\"3\\"\\n      :value=\\"470\\"\\n      :segmentColors=\'[\\"#0055A4\\", \\"#ECEFF4\\", \\"#EF4135\\"]\'\\n      needleColor=\'#000080\' \\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer\\n      :maxSegmentLabels=\\"12\\"\\n      :segments=\\"3\\"\\n      :value=\\"470\\"\\n      :segmentColors=\'[\\"tomato\\", \\"gold\\", \\"limegreen\\"]\'\\n      needleColor=\\"lightgreen\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const CustomSegmentStops = () => `\\n  <div>\\n    <vue-speedometer \\n      :needleHeightRatio=\\"0.7\\"\\n      :maxSegmentLabels=\\"5\\"\\n      :segments=\\"3\\"\\n      :customSegmentStops=\\"[0, 500, 750, 900, 1000]\\"\\n      :segmentColors=\'[\\"firebrick\\", \\"tomato\\", \\"gold\\", \\"limegreen\\"]\'\\n      :value=\\"333\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer \\n      :forceRender=\\"true\\"\\n      :maxSegmentLabels=\\"1\\"\\n      :customSegmentStops=\\"[0, 777, 1000]\\"\\n      :segmentColors=\'[\\"#5959ac\\", \\"#AAA\\"]\'\\n      needleColor=\\"#5959ac\\"\\n      :currentValueText=\'\\"Current Value: \\\\${value}\\"\'\\n      :value=\\"777\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer \\n      :maxSegmentLabels=\\"1\\"\\n      :customSegmentStops=\\"[-120, -100, 0]\\"\\n      :segmentColors=\'[\\"tomato\\", \\"gold\\"]\'\\n      needleColor=\\"#5959ac\\"\\n      :currentValueText=\'\\"Current Value: \\\\${value}\\"\'\\n      :value=\\"-100\\"\\n      :minValue=\\"-120\\"\\n      :maxValue=\\"0\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const FluidWidthView = () => ({\\n  data() {\\n    return {\\n      styles: {\\n        width: \\"500px\\",\\n        height: \\"300px\\",\\n        background: \\"#2a2744\\",\\n      },\\n    }\\n  },\\n  template: `\\n    <div :style=\\"styles\\">\\n      <vue-speedometer \\n        :fluidWidth=\\"true\\"\\n        :minValue=\\"100\\"\\n        :maxValue=\\"500\\"\\n        :value=\\"473\\"\\n        needleColor=\\"steelblue\\"\\n        textColor=\\"${textColor}\\"\\n      />\\n      <div style=\\"color: ${textColor}\\">\\n      Fluid width takes the width of the parent div (<strong>500px</strong> in this case)\\n      </div>\\n    </div>\\n  `,\\n})\\n\\nexport const NeedleTransitionDuration = () => `\\n  <div>\\n    <vue-speedometer \\n      :value=\\"333\\"\\n      needleColor=\\"steelblue\\"\\n      :needleTransitionDuration=\\"4000\\"\\n      needleTransition=\\"easeElastic\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer \\n      :value=\\"333\\"\\n      needleColor=\\"steelblue\\"\\n      :needleTransitionDuration=\\"3000\\"\\n      needleTransition=\\"easeQuadInOut\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const ForceRenderTheComponent = () => ({\\n  data() {\\n    return {\\n      buttonStyles: {\\n        padding: \\"7px\\",\\n        border: \\"thin solid steelblue\\",\\n        background: \\"white\\",\\n        cursor: \\"pointer\\",\\n        marginBottom: \\"17px\\",\\n      },\\n      value1: {\\n        value: 111,\\n        startColor: \\"blue\\",\\n        segments: 5,\\n        width: 300,\\n        height: 300,\\n        currentValueText: \\"${value}\\",\\n      },\\n      value2: {\\n        value: 222,\\n        startColor: \\"orange\\",\\n        segments: 10,\\n        width: 400,\\n        height: 400,\\n        currentValueText: \\"Current Value: ${value}\\",\\n      },\\n      toggleStatus: false,\\n    }\\n  },\\n  methods: {\\n    onClick: function () {\\n      this.toggleStatus = !this.toggleStatus\\n    },\\n  },\\n  template: `\\n    <div style=\\"background: #2a2744\\">\\n    <div style=\\"color: ${textColor}\\">\\n      By default, on props change only the current value and needle transition is updated. \\n      Force render completly re-renders the whole component on update. \\n      This is helpful for features like dynmaic width/height on resize\\n      </div>\\n      <hr />\\n      <button @click=\\"onClick\\" :style=\\"buttonStyles\\">\\n        <strong>Click Here to force render props</strong>\\n      </button>\\n      \\n      <vue-speedometer\\n        :value=\\"toggleStatus ? value1.value : value2.value\\"\\n        :startColor=\\"toggleStatus ? value1.startColor : value2.startColor\\"\\n        :forceRender=\\"true\\"\\n        :segments=\\"toggleStatus ? value1.segments : value2.segments\\"\\n        :width=\\"toggleStatus ? value1.width : value2.width\\"\\n        :height=\\"toggleStatus ? value1.height : value2.height\\"\\n        :currentValueText=\\"toggleStatus ? value1.currentValueText : value2.currentValueText\\"\\n        textColor=\\"${textColor}\\"\\n      />\\n    </div>\\n`,\\n})\\n\\nexport const ConfiguringTheFormatForValuesDisplayed = () => `\\n  <div>\\n    <vue-speedometer\\n      :maxValue=\\"150\\"\\n      :value=\\"70.7\\"\\n      valueFormat=\\"d\\"\\n      :customSegmentStops=\\"[0, 50, 70, 90, 150]\\"\\n      :segmentColors=\'[\\"#bf616a\\", \\"#d08770\\", \\"#ebcb8b\\", \\"#a3be8c\\"]\'\\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer\\n      :maxValue=\\"150\\"\\n      :value=\\"70.7\\"\\n      :segments=\\"5\\"\\n      valueFormat=\\"d\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const CustomCurrentValueText = () => `\\n  <div>\\n    <vue-speedometer\\n      :value=\\"333\\"\\n      needleColor=\\"steelblue\\"\\n      :needleTransitionDuration=\\"4000\\"\\n      needleTransition=\\"easeElastic\\"\\n      currentValueText=\\"Current Value: \\\\${value}\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const CustomCurrentValuePlaceholderStyleForEgValue = () => `\\n  <div>\\n    <vue-speedometer\\n      :value=\\"333\\"\\n      needleColor=\\"steelblue\\"\\n      :needleTransitionDuration=\\"4000\\"\\n      needleTransition=\\"easeElastic\\"\\n      currentValueText=\\"Current Value: #{value}\\"\\n      currentValuePlaceholderStyle=\\"#{value}\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const ConfigureNeedleLengthAndFontSizes = () => `\\n  <div>\\n    <vue-speedometer\\n      :value=\\"333\\"\\n      :needleHeightRatio=\\"0.5\\"\\n      labelFontSize=\\"15px\\"\\n      valueTextFontSize=\\"23px\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const GradientEffectWithLargeNumberOfSegmentsAndMaxSegmentLabelsConfig = () => `\\n  <div>\\n    <vue-speedometer\\n      :needleHeightRatio=\\"0.7\\"\\n      :maxSegmentLabels=\\"5\\"\\n      :segments=\\"75\\"\\n      :value=\\"333\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const NoSegmentLabels = () => `\\n  <div>\\n    <vue-speedometer\\n      :maxSegmentLabels=\\"0\\" \\n      :segments=\\"75\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n    <vue-speedometer\\n      :maxSegmentLabels=\\"0\\"\\n      :segments=\\"4\\"\\n      :value=\\"333\\"\\n      startColor=\\"#2E3440\\"\\n      endColor=\\"#4C566A\\"\\n      needleColor=\\"#D8DEE9\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n\\nexport const NormalUpdationOfValues = () => ({\\n  created() {\\n    window.setInterval(() => {\\n      this.toggle = !this.toggle\\n    }, 3000)\\n  },\\n  data() {\\n    return {\\n      toggle: false,\\n    }\\n  },\\n  template: `\\n    <div>\\n      <vue-speedometer\\n        :maxSegmentLabels=\\"0\\" \\n        :segments=\\"75\\"\\n        :value=\\"toggle ? 333 : 555\\"\\n        needleTransition=\\"easeElastic\\"\\n        :needleTransitionDuration=\\"3333\\"\\n        textColor=\\"${textColor}\\"\\n      />\\n      <vue-speedometer\\n        :maxSegmentLabels=\\"0\\"\\n        :segments=\\"4\\"\\n        :value=\\"toggle ? 333 : 555\\"\\n        startColor=\\"#2E3440\\"\\n        endColor=\\"#4C566A\\"\\n        needleColor=\\"#D8DEE9\\"\\n        textColor=\\"${textColor}\\"\\n      />\\n    </div>\\n  `,\\n})\\n\\nexport const CustomizeFontSizesAndSpacing = () => `\\n  <div>\\n    <vue-speedometer\\n      :value=\\"333\\"\\n      :needleHeightRatio=\\"0.5\\"\\n      labelFontSize=\\"31px\\"\\n      valueTextFontSize=\\"37px\\"\\n      valueTextFontWeight=\\"500\\"\\n      :paddingHorizontal=\\"17\\"\\n      :paddingVertical=\\"17\\"\\n      currentValueText=\\"Value: \\\\${value}\\"\\n      textColor=\\"${textColor}\\"\\n    />\\n  </div>\\n`\\n","locationsMap":{"vue-speedometer--default-with-no-config":{"startLoc":{"col":35,"line":7},"endLoc":{"col":48,"line":8},"startBody":{"col":35,"line":7},"endBody":{"col":48,"line":8}},"vue-speedometer--configuring-values":{"startLoc":{"col":33,"line":10},"endLoc":{"col":61,"line":11},"startBody":{"col":33,"line":10},"endBody":{"col":61,"line":11}},"vue-speedometer--custom-segment-labels":{"startLoc":{"col":35,"line":13},"endLoc":{"col":1,"line":85},"startBody":{"col":35,"line":13},"endBody":{"col":1,"line":85}},"vue-speedometer--custom-segment-colors":{"startLoc":{"col":35,"line":87},"endLoc":{"col":1,"line":106},"startBody":{"col":35,"line":87},"endBody":{"col":1,"line":106}},"vue-speedometer--custom-segment-stops":{"startLoc":{"col":34,"line":108},"endLoc":{"col":1,"line":141},"startBody":{"col":34,"line":108},"endBody":{"col":1,"line":141}},"vue-speedometer--fluid-width-view":{"startLoc":{"col":30,"line":143},"endLoc":{"col":2,"line":168},"startBody":{"col":30,"line":143},"endBody":{"col":2,"line":168}},"vue-speedometer--needle-transition-duration":{"startLoc":{"col":40,"line":170},"endLoc":{"col":1,"line":187},"startBody":{"col":40,"line":170},"endBody":{"col":1,"line":187}},"vue-speedometer--force-render-the-component":{"startLoc":{"col":39,"line":189},"endLoc":{"col":2,"line":247},"startBody":{"col":39,"line":189},"endBody":{"col":2,"line":247}},"vue-speedometer--configuring-the-format-for-values-displayed":{"startLoc":{"col":54,"line":249},"endLoc":{"col":1,"line":267},"startBody":{"col":54,"line":249},"endBody":{"col":1,"line":267}},"vue-speedometer--custom-current-value-text":{"startLoc":{"col":38,"line":269},"endLoc":{"col":1,"line":280},"startBody":{"col":38,"line":269},"endBody":{"col":1,"line":280}},"vue-speedometer--custom-current-value-placeholder-style-for-eg-value":{"startLoc":{"col":60,"line":282},"endLoc":{"col":1,"line":294},"startBody":{"col":60,"line":282},"endBody":{"col":1,"line":294}},"vue-speedometer--configure-needle-length-and-font-sizes":{"startLoc":{"col":49,"line":296},"endLoc":{"col":1,"line":306},"startBody":{"col":49,"line":296},"endBody":{"col":1,"line":306}},"vue-speedometer--gradient-effect-with-large-number-of-segments-and-max-segment-labels-config":{"startLoc":{"col":80,"line":308},"endLoc":{"col":1,"line":318},"startBody":{"col":80,"line":308},"endBody":{"col":1,"line":318}},"vue-speedometer--no-segment-labels":{"startLoc":{"col":31,"line":320},"endLoc":{"col":1,"line":337},"startBody":{"col":31,"line":320},"endBody":{"col":1,"line":337}},"vue-speedometer--normal-updation-of-values":{"startLoc":{"col":38,"line":339},"endLoc":{"col":2,"line":371},"startBody":{"col":38,"line":339},"endBody":{"col":2,"line":371}},"vue-speedometer--customize-font-sizes-and-spacing":{"startLoc":{"col":44,"line":373},"endLoc":{"col":1,"line":387},"startBody":{"col":44,"line":373},"endBody":{"col":1,"line":387}}}},}, title: "vue-speedometer" }\n\nconst textColor = "#AAA"\n\nexport const DefaultWithNoConfig = addSourceDecorator(() =>\n  `<vue-speedometer textColor="${textColor}" />`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const ConfiguringValues = addSourceDecorator(() =>\n  `<vue-speedometer :value="333" textColor="${textColor}" />`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const CustomSegmentLabels = addSourceDecorator(() => `\n  <div>\n    <vue-speedometer \n      :width="500"\n      :needleHeightRatio="0.7"\n      :value="777"\n      currentValueText="Happiness Level"\n      :customSegmentLabels=\'[\n        {\n          text: "Very Bad",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Bad",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Ok",\n          position: "INSIDE",\n          color: "#555",\n          fontSize: "19px",\n        },\n        {\n          text: "Good",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Very Good",\n          position: "INSIDE",\n          color: "#555",\n        },\n      ]\'\n      :ringWidth="47"\n      :needleTransitionDuration="3333"\n      needleTransition="easeElastic"\n      needleColor="#a7ff83"\n      textColor="#d8dee9"\n    />\n    <vue-speedometer \n      :width="500"\n      :needleHeightRatio="0.7"\n      :value="777"\n      :customSegmentStops=\'[0, 250, 750, 1000]\'\n      :segmentColors=\'["#9399ff", "#14ffec", "#00bbf0"]\'\n      currentValueText="How are you?"\n      :customSegmentLabels=\'[\n        {\n          text: "Good",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n        {\n          text: "Great",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n        {\n          text: "Awesome!",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n      ]\'\n      :ringWidth="47"\n      :needleTransitionDuration="3333"\n      needleTransition="easeElastic"\n      needleColor="#a7ff83"\n      textColor="#d8dee9"\n    />\n  </div>\n`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const CustomSegmentColors = addSourceDecorator(() => `\n  <div>\n    <vue-speedometer \n      :maxSegmentLabels="12"\n      :segments="3"\n      :value="470"\n      :segmentColors=\'["#0055A4", "#ECEFF4", "#EF4135"]\'\n      needleColor=\'#000080\' \n      textColor="${textColor}"\n    />\n    <vue-speedometer\n      :maxSegmentLabels="12"\n      :segments="3"\n      :value="470"\n      :segmentColors=\'["tomato", "gold", "limegreen"]\'\n      needleColor="lightgreen"\n      textColor="${textColor}"\n    />\n  </div>\n`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const CustomSegmentStops = addSourceDecorator(() => `\n  <div>\n    <vue-speedometer \n      :needleHeightRatio="0.7"\n      :maxSegmentLabels="5"\n      :segments="3"\n      :customSegmentStops="[0, 500, 750, 900, 1000]"\n      :segmentColors=\'["firebrick", "tomato", "gold", "limegreen"]\'\n      :value="333"\n      textColor="${textColor}"\n    />\n    <vue-speedometer \n      :forceRender="true"\n      :maxSegmentLabels="1"\n      :customSegmentStops="[0, 777, 1000]"\n      :segmentColors=\'["#5959ac", "#AAA"]\'\n      needleColor="#5959ac"\n      :currentValueText=\'"Current Value: \\${value}"\'\n      :value="777"\n      textColor="${textColor}"\n    />\n    <vue-speedometer \n      :maxSegmentLabels="1"\n      :customSegmentStops="[-120, -100, 0]"\n      :segmentColors=\'["tomato", "gold"]\'\n      needleColor="#5959ac"\n      :currentValueText=\'"Current Value: \\${value}"\'\n      :value="-100"\n      :minValue="-120"\n      :maxValue="0"\n      textColor="${textColor}"\n    />\n  </div>\n`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const FluidWidthView = addSourceDecorator(() => ({\n  data() {\n    return {\n      styles: {\n        width: "500px",\n        height: "300px",\n        background: "#2a2744",\n      },\n    }\n  },\n  template: `\n    <div :style="styles">\n      <vue-speedometer \n        :fluidWidth="true"\n        :minValue="100"\n        :maxValue="500"\n        :value="473"\n        needleColor="steelblue"\n        textColor="${textColor}"\n      />\n      <div style="color: ${textColor}">\n      Fluid width takes the width of the parent div (<strong>500px</strong> in this case)\n      </div>\n    </div>\n  `,\n}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const NeedleTransitionDuration = addSourceDecorator(() => `\n  <div>\n    <vue-speedometer \n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      textColor="${textColor}"\n    />\n    <vue-speedometer \n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="3000"\n      needleTransition="easeQuadInOut"\n      textColor="${textColor}"\n    />\n  </div>\n`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const ForceRenderTheComponent = addSourceDecorator(() => ({\n  data() {\n    return {\n      buttonStyles: {\n        padding: "7px",\n        border: "thin solid steelblue",\n        background: "white",\n        cursor: "pointer",\n        marginBottom: "17px",\n      },\n      value1: {\n        value: 111,\n        startColor: "blue",\n        segments: 5,\n        width: 300,\n        height: 300,\n        currentValueText: "${value}",\n      },\n      value2: {\n        value: 222,\n        startColor: "orange",\n        segments: 10,\n        width: 400,\n        height: 400,\n        currentValueText: "Current Value: ${value}",\n      },\n      toggleStatus: false,\n    }\n  },\n  methods: {\n    onClick: function () {\n      this.toggleStatus = !this.toggleStatus\n    },\n  },\n  template: `\n    <div style="background: #2a2744">\n    <div style="color: ${textColor}">\n      By default, on props change only the current value and needle transition is updated. \n      Force render completly re-renders the whole component on update. \n      This is helpful for features like dynmaic width/height on resize\n      </div>\n      <hr />\n      <button @click="onClick" :style="buttonStyles">\n        <strong>Click Here to force render props</strong>\n      </button>\n      \n      <vue-speedometer\n        :value="toggleStatus ? value1.value : value2.value"\n        :startColor="toggleStatus ? value1.startColor : value2.startColor"\n        :forceRender="true"\n        :segments="toggleStatus ? value1.segments : value2.segments"\n        :width="toggleStatus ? value1.width : value2.width"\n        :height="toggleStatus ? value1.height : value2.height"\n        :currentValueText="toggleStatus ? value1.currentValueText : value2.currentValueText"\n        textColor="${textColor}"\n      />\n    </div>\n`,\n}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const ConfiguringTheFormatForValuesDisplayed = addSourceDecorator(() => `\n  <div>\n    <vue-speedometer\n      :maxValue="150"\n      :value="70.7"\n      valueFormat="d"\n      :customSegmentStops="[0, 50, 70, 90, 150]"\n      :segmentColors=\'["#bf616a", "#d08770", "#ebcb8b", "#a3be8c"]\'\n      textColor="${textColor}"\n    />\n    <vue-speedometer\n      :maxValue="150"\n      :value="70.7"\n      :segments="5"\n      valueFormat="d"\n      textColor="${textColor}"\n    />\n  </div>\n`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const CustomCurrentValueText = addSourceDecorator(() => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      currentValueText="Current Value: \\${value}"\n      textColor="${textColor}"\n    />\n  </div>\n`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const CustomCurrentValuePlaceholderStyleForEgValue = addSourceDecorator(() => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      currentValueText="Current Value: #{value}"\n      currentValuePlaceholderStyle="#{value}"\n      textColor="${textColor}"\n    />\n  </div>\n`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const ConfigureNeedleLengthAndFontSizes = addSourceDecorator(() => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      :needleHeightRatio="0.5"\n      labelFontSize="15px"\n      valueTextFontSize="23px"\n      textColor="${textColor}"\n    />\n  </div>\n`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const GradientEffectWithLargeNumberOfSegmentsAndMaxSegmentLabelsConfig = addSourceDecorator(() => `\n  <div>\n    <vue-speedometer\n      :needleHeightRatio="0.7"\n      :maxSegmentLabels="5"\n      :segments="75"\n      :value="333"\n      textColor="${textColor}"\n    />\n  </div>\n`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const NoSegmentLabels = addSourceDecorator(() => `\n  <div>\n    <vue-speedometer\n      :maxSegmentLabels="0" \n      :segments="75"\n      textColor="${textColor}"\n    />\n    <vue-speedometer\n      :maxSegmentLabels="0"\n      :segments="4"\n      :value="333"\n      startColor="#2E3440"\n      endColor="#4C566A"\n      needleColor="#D8DEE9"\n      textColor="${textColor}"\n    />\n  </div>\n`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const NormalUpdationOfValues = addSourceDecorator(() => ({\n  created() {\n    window.setInterval(() => {\n      this.toggle = !this.toggle\n    }, 3000)\n  },\n  data() {\n    return {\n      toggle: false,\n    }\n  },\n  template: `\n    <div>\n      <vue-speedometer\n        :maxSegmentLabels="0" \n        :segments="75"\n        :value="toggle ? 333 : 555"\n        needleTransition="easeElastic"\n        :needleTransitionDuration="3333"\n        textColor="${textColor}"\n      />\n      <vue-speedometer\n        :maxSegmentLabels="0"\n        :segments="4"\n        :value="toggle ? 333 : 555"\n        startColor="#2E3440"\n        endColor="#4C566A"\n        needleColor="#D8DEE9"\n        textColor="${textColor}"\n      />\n    </div>\n  `,\n}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport const CustomizeFontSizesAndSpacing = addSourceDecorator(() => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      :needleHeightRatio="0.5"\n      labelFontSize="31px"\n      valueTextFontSize="37px"\n      valueTextFontWeight="500"\n      :paddingHorizontal="17"\n      :paddingVertical="17"\n      currentValueText="Value: \\${value}"\n      textColor="${textColor}"\n    />\n  </div>\n`, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});',locationsMap:{"vue-speedometer--default-with-no-config":{startLoc:{col:35,line:29},endLoc:{col:186,line:30},startBody:{col:35,line:29},endBody:{col:186,line:30}},"vue-speedometer--configuring-values":{startLoc:{col:33,line:32},endLoc:{col:199,line:33},startBody:{col:33,line:32},endBody:{col:199,line:33}},"vue-speedometer--custom-segment-labels":{startLoc:{col:35,line:35},endLoc:{col:139,line:107},startBody:{col:35,line:35},endBody:{col:139,line:107}},"vue-speedometer--custom-segment-colors":{startLoc:{col:35,line:109},endLoc:{col:139,line:128},startBody:{col:35,line:109},endBody:{col:139,line:128}},"vue-speedometer--custom-segment-stops":{startLoc:{col:34,line:130},endLoc:{col:139,line:163},startBody:{col:34,line:130},endBody:{col:139,line:163}},"vue-speedometer--fluid-width-view":{startLoc:{col:30,line:165},endLoc:{col:140,line:190},startBody:{col:30,line:165},endBody:{col:140,line:190}},"vue-speedometer--needle-transition-duration":{startLoc:{col:40,line:192},endLoc:{col:139,line:209},startBody:{col:40,line:192},endBody:{col:139,line:209}},"vue-speedometer--force-render-the-component":{startLoc:{col:39,line:211},endLoc:{col:140,line:269},startBody:{col:39,line:211},endBody:{col:140,line:269}},"vue-speedometer--configuring-the-format-for-values-displayed":{startLoc:{col:54,line:271},endLoc:{col:139,line:289},startBody:{col:54,line:271},endBody:{col:139,line:289}},"vue-speedometer--custom-current-value-text":{startLoc:{col:38,line:291},endLoc:{col:139,line:302},startBody:{col:38,line:291},endBody:{col:139,line:302}},"vue-speedometer--custom-current-value-placeholder-style-for-eg-value":{startLoc:{col:60,line:304},endLoc:{col:139,line:316},startBody:{col:60,line:304},endBody:{col:139,line:316}},"vue-speedometer--configure-needle-length-and-font-sizes":{startLoc:{col:49,line:318},endLoc:{col:139,line:328},startBody:{col:49,line:318},endBody:{col:139,line:328}},"vue-speedometer--gradient-effect-with-large-number-of-segments-and-max-segment-labels-config":{startLoc:{col:80,line:330},endLoc:{col:139,line:340},startBody:{col:80,line:330},endBody:{col:139,line:340}},"vue-speedometer--no-segment-labels":{startLoc:{col:31,line:342},endLoc:{col:139,line:359},startBody:{col:31,line:342},endBody:{col:139,line:359}},"vue-speedometer--normal-updation-of-values":{startLoc:{col:38,line:361},endLoc:{col:140,line:393},startBody:{col:38,line:361},endBody:{col:140,line:393}},"vue-speedometer--customize-font-sizes-and-spacing":{startLoc:{col:44,line:395},endLoc:{col:139,line:409},startBody:{col:44,line:395},endBody:{col:139,line:409}}}}},"storySource",{source:'// IMPORTANT: checkout `.storybook/preview.js` to switch between DEV and DIST/PROD builds\n\nexport default { title: "vue-speedometer" }\n\nconst textColor = "#AAA"\n\nexport const DefaultWithNoConfig = () =>\n  `<vue-speedometer textColor="${textColor}" />`\n\nexport const ConfiguringValues = () =>\n  `<vue-speedometer :value="333" textColor="${textColor}" />`\n\nexport const CustomSegmentLabels = () => `\n  <div>\n    <vue-speedometer \n      :width="500"\n      :needleHeightRatio="0.7"\n      :value="777"\n      currentValueText="Happiness Level"\n      :customSegmentLabels=\'[\n        {\n          text: "Very Bad",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Bad",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Ok",\n          position: "INSIDE",\n          color: "#555",\n          fontSize: "19px",\n        },\n        {\n          text: "Good",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Very Good",\n          position: "INSIDE",\n          color: "#555",\n        },\n      ]\'\n      :ringWidth="47"\n      :needleTransitionDuration="3333"\n      needleTransition="easeElastic"\n      needleColor="#a7ff83"\n      textColor="#d8dee9"\n    />\n    <vue-speedometer \n      :width="500"\n      :needleHeightRatio="0.7"\n      :value="777"\n      :customSegmentStops=\'[0, 250, 750, 1000]\'\n      :segmentColors=\'["#9399ff", "#14ffec", "#00bbf0"]\'\n      currentValueText="How are you?"\n      :customSegmentLabels=\'[\n        {\n          text: "Good",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n        {\n          text: "Great",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n        {\n          text: "Awesome!",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n      ]\'\n      :ringWidth="47"\n      :needleTransitionDuration="3333"\n      needleTransition="easeElastic"\n      needleColor="#a7ff83"\n      textColor="#d8dee9"\n    />\n  </div>\n`\n\nexport const CustomSegmentColors = () => `\n  <div>\n    <vue-speedometer \n      :maxSegmentLabels="12"\n      :segments="3"\n      :value="470"\n      :segmentColors=\'["#0055A4", "#ECEFF4", "#EF4135"]\'\n      needleColor=\'#000080\' \n      textColor="${textColor}"\n    />\n    <vue-speedometer\n      :maxSegmentLabels="12"\n      :segments="3"\n      :value="470"\n      :segmentColors=\'["tomato", "gold", "limegreen"]\'\n      needleColor="lightgreen"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const CustomSegmentStops = () => `\n  <div>\n    <vue-speedometer \n      :needleHeightRatio="0.7"\n      :maxSegmentLabels="5"\n      :segments="3"\n      :customSegmentStops="[0, 500, 750, 900, 1000]"\n      :segmentColors=\'["firebrick", "tomato", "gold", "limegreen"]\'\n      :value="333"\n      textColor="${textColor}"\n    />\n    <vue-speedometer \n      :forceRender="true"\n      :maxSegmentLabels="1"\n      :customSegmentStops="[0, 777, 1000]"\n      :segmentColors=\'["#5959ac", "#AAA"]\'\n      needleColor="#5959ac"\n      :currentValueText=\'"Current Value: \\${value}"\'\n      :value="777"\n      textColor="${textColor}"\n    />\n    <vue-speedometer \n      :maxSegmentLabels="1"\n      :customSegmentStops="[-120, -100, 0]"\n      :segmentColors=\'["tomato", "gold"]\'\n      needleColor="#5959ac"\n      :currentValueText=\'"Current Value: \\${value}"\'\n      :value="-100"\n      :minValue="-120"\n      :maxValue="0"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const FluidWidthView = () => ({\n  data() {\n    return {\n      styles: {\n        width: "500px",\n        height: "300px",\n        background: "#2a2744",\n      },\n    }\n  },\n  template: `\n    <div :style="styles">\n      <vue-speedometer \n        :fluidWidth="true"\n        :minValue="100"\n        :maxValue="500"\n        :value="473"\n        needleColor="steelblue"\n        textColor="${textColor}"\n      />\n      <div style="color: ${textColor}">\n      Fluid width takes the width of the parent div (<strong>500px</strong> in this case)\n      </div>\n    </div>\n  `,\n})\n\nexport const NeedleTransitionDuration = () => `\n  <div>\n    <vue-speedometer \n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      textColor="${textColor}"\n    />\n    <vue-speedometer \n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="3000"\n      needleTransition="easeQuadInOut"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const ForceRenderTheComponent = () => ({\n  data() {\n    return {\n      buttonStyles: {\n        padding: "7px",\n        border: "thin solid steelblue",\n        background: "white",\n        cursor: "pointer",\n        marginBottom: "17px",\n      },\n      value1: {\n        value: 111,\n        startColor: "blue",\n        segments: 5,\n        width: 300,\n        height: 300,\n        currentValueText: "${value}",\n      },\n      value2: {\n        value: 222,\n        startColor: "orange",\n        segments: 10,\n        width: 400,\n        height: 400,\n        currentValueText: "Current Value: ${value}",\n      },\n      toggleStatus: false,\n    }\n  },\n  methods: {\n    onClick: function () {\n      this.toggleStatus = !this.toggleStatus\n    },\n  },\n  template: `\n    <div style="background: #2a2744">\n    <div style="color: ${textColor}">\n      By default, on props change only the current value and needle transition is updated. \n      Force render completly re-renders the whole component on update. \n      This is helpful for features like dynmaic width/height on resize\n      </div>\n      <hr />\n      <button @click="onClick" :style="buttonStyles">\n        <strong>Click Here to force render props</strong>\n      </button>\n      \n      <vue-speedometer\n        :value="toggleStatus ? value1.value : value2.value"\n        :startColor="toggleStatus ? value1.startColor : value2.startColor"\n        :forceRender="true"\n        :segments="toggleStatus ? value1.segments : value2.segments"\n        :width="toggleStatus ? value1.width : value2.width"\n        :height="toggleStatus ? value1.height : value2.height"\n        :currentValueText="toggleStatus ? value1.currentValueText : value2.currentValueText"\n        textColor="${textColor}"\n      />\n    </div>\n`,\n})\n\nexport const ConfiguringTheFormatForValuesDisplayed = () => `\n  <div>\n    <vue-speedometer\n      :maxValue="150"\n      :value="70.7"\n      valueFormat="d"\n      :customSegmentStops="[0, 50, 70, 90, 150]"\n      :segmentColors=\'["#bf616a", "#d08770", "#ebcb8b", "#a3be8c"]\'\n      textColor="${textColor}"\n    />\n    <vue-speedometer\n      :maxValue="150"\n      :value="70.7"\n      :segments="5"\n      valueFormat="d"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const CustomCurrentValueText = () => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      currentValueText="Current Value: \\${value}"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const CustomCurrentValuePlaceholderStyleForEgValue = () => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      currentValueText="Current Value: #{value}"\n      currentValuePlaceholderStyle="#{value}"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const ConfigureNeedleLengthAndFontSizes = () => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      :needleHeightRatio="0.5"\n      labelFontSize="15px"\n      valueTextFontSize="23px"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const GradientEffectWithLargeNumberOfSegmentsAndMaxSegmentLabelsConfig = () => `\n  <div>\n    <vue-speedometer\n      :needleHeightRatio="0.7"\n      :maxSegmentLabels="5"\n      :segments="75"\n      :value="333"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const NoSegmentLabels = () => `\n  <div>\n    <vue-speedometer\n      :maxSegmentLabels="0" \n      :segments="75"\n      textColor="${textColor}"\n    />\n    <vue-speedometer\n      :maxSegmentLabels="0"\n      :segments="4"\n      :value="333"\n      startColor="#2E3440"\n      endColor="#4C566A"\n      needleColor="#D8DEE9"\n      textColor="${textColor}"\n    />\n  </div>\n`\n\nexport const NormalUpdationOfValues = () => ({\n  created() {\n    window.setInterval(() => {\n      this.toggle = !this.toggle\n    }, 3000)\n  },\n  data() {\n    return {\n      toggle: false,\n    }\n  },\n  template: `\n    <div>\n      <vue-speedometer\n        :maxSegmentLabels="0" \n        :segments="75"\n        :value="toggle ? 333 : 555"\n        needleTransition="easeElastic"\n        :needleTransitionDuration="3333"\n        textColor="${textColor}"\n      />\n      <vue-speedometer\n        :maxSegmentLabels="0"\n        :segments="4"\n        :value="toggle ? 333 : 555"\n        startColor="#2E3440"\n        endColor="#4C566A"\n        needleColor="#D8DEE9"\n        textColor="${textColor}"\n      />\n    </div>\n  `,\n})\n\nexport const CustomizeFontSizesAndSpacing = () => `\n  <div>\n    <vue-speedometer\n      :value="333"\n      :needleHeightRatio="0.5"\n      labelFontSize="31px"\n      valueTextFontSize="37px"\n      valueTextFontWeight="500"\n      :paddingHorizontal="17"\n      :paddingVertical="17"\n      currentValueText="Value: \\${value}"\n      textColor="${textColor}"\n    />\n  </div>\n`\n',locationsMap:{"vue-speedometer--default-with-no-config":{startLoc:{col:35,line:7},endLoc:{col:48,line:8},startBody:{col:35,line:7},endBody:{col:48,line:8}},"vue-speedometer--configuring-values":{startLoc:{col:33,line:10},endLoc:{col:61,line:11},startBody:{col:33,line:10},endBody:{col:61,line:11}},"vue-speedometer--custom-segment-labels":{startLoc:{col:35,line:13},endLoc:{col:1,line:85},startBody:{col:35,line:13},endBody:{col:1,line:85}},"vue-speedometer--custom-segment-colors":{startLoc:{col:35,line:87},endLoc:{col:1,line:106},startBody:{col:35,line:87},endBody:{col:1,line:106}},"vue-speedometer--custom-segment-stops":{startLoc:{col:34,line:108},endLoc:{col:1,line:141},startBody:{col:34,line:108},endBody:{col:1,line:141}},"vue-speedometer--fluid-width-view":{startLoc:{col:30,line:143},endLoc:{col:2,line:168},startBody:{col:30,line:143},endBody:{col:2,line:168}},"vue-speedometer--needle-transition-duration":{startLoc:{col:40,line:170},endLoc:{col:1,line:187},startBody:{col:40,line:170},endBody:{col:1,line:187}},"vue-speedometer--force-render-the-component":{startLoc:{col:39,line:189},endLoc:{col:2,line:247},startBody:{col:39,line:189},endBody:{col:2,line:247}},"vue-speedometer--configuring-the-format-for-values-displayed":{startLoc:{col:54,line:249},endLoc:{col:1,line:267},startBody:{col:54,line:249},endBody:{col:1,line:267}},"vue-speedometer--custom-current-value-text":{startLoc:{col:38,line:269},endLoc:{col:1,line:280},startBody:{col:38,line:269},endBody:{col:1,line:280}},"vue-speedometer--custom-current-value-placeholder-style-for-eg-value":{startLoc:{col:60,line:282},endLoc:{col:1,line:294},startBody:{col:60,line:282},endBody:{col:1,line:294}},"vue-speedometer--configure-needle-length-and-font-sizes":{startLoc:{col:49,line:296},endLoc:{col:1,line:306},startBody:{col:49,line:296},endBody:{col:1,line:306}},"vue-speedometer--gradient-effect-with-large-number-of-segments-and-max-segment-labels-config":{startLoc:{col:80,line:308},endLoc:{col:1,line:318},startBody:{col:80,line:308},endBody:{col:1,line:318}},"vue-speedometer--no-segment-labels":{startLoc:{col:31,line:320},endLoc:{col:1,line:337},startBody:{col:31,line:320},endBody:{col:1,line:337}},"vue-speedometer--normal-updation-of-values":{startLoc:{col:38,line:339},endLoc:{col:2,line:371},startBody:{col:38,line:339},endBody:{col:2,line:371}},"vue-speedometer--customize-font-sizes-and-spacing":{startLoc:{col:44,line:373},endLoc:{col:1,line:387},startBody:{col:44,line:373},endBody:{col:1,line:387}}}}),title:"vue-speedometer"};exports.default=_default;var DefaultWithNoConfig=addSourceDecorator(addSourceDecorator((function(){return'<vue-speedometer textColor="'.concat("#AAA",'" />')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.DefaultWithNoConfig=DefaultWithNoConfig;var ConfiguringValues=addSourceDecorator(addSourceDecorator((function(){return'<vue-speedometer :value="333" textColor="'.concat("#AAA",'" />')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.ConfiguringValues=ConfiguringValues;var CustomSegmentLabels=addSourceDecorator(addSourceDecorator((function(){return'\n  <div>\n    <vue-speedometer \n      :width="500"\n      :needleHeightRatio="0.7"\n      :value="777"\n      currentValueText="Happiness Level"\n      :customSegmentLabels=\'[\n        {\n          text: "Very Bad",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Bad",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Ok",\n          position: "INSIDE",\n          color: "#555",\n          fontSize: "19px",\n        },\n        {\n          text: "Good",\n          position: "INSIDE",\n          color: "#555",\n        },\n        {\n          text: "Very Good",\n          position: "INSIDE",\n          color: "#555",\n        },\n      ]\'\n      :ringWidth="47"\n      :needleTransitionDuration="3333"\n      needleTransition="easeElastic"\n      needleColor="#a7ff83"\n      textColor="#d8dee9"\n    />\n    <vue-speedometer \n      :width="500"\n      :needleHeightRatio="0.7"\n      :value="777"\n      :customSegmentStops=\'[0, 250, 750, 1000]\'\n      :segmentColors=\'["#9399ff", "#14ffec", "#00bbf0"]\'\n      currentValueText="How are you?"\n      :customSegmentLabels=\'[\n        {\n          text: "Good",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n        {\n          text: "Great",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n        {\n          text: "Awesome!",\n          position: "OUTSIDE",\n          color: "#d8dee9",\n        },\n      ]\'\n      :ringWidth="47"\n      :needleTransitionDuration="3333"\n      needleTransition="easeElastic"\n      needleColor="#a7ff83"\n      textColor="#d8dee9"\n    />\n  </div>\n'}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.CustomSegmentLabels=CustomSegmentLabels;var CustomSegmentColors=addSourceDecorator(addSourceDecorator((function(){return'\n  <div>\n    <vue-speedometer \n      :maxSegmentLabels="12"\n      :segments="3"\n      :value="470"\n      :segmentColors=\'["#0055A4", "#ECEFF4", "#EF4135"]\'\n      needleColor=\'#000080\' \n      textColor="'.concat("#AAA",'"\n    />\n    <vue-speedometer\n      :maxSegmentLabels="12"\n      :segments="3"\n      :value="470"\n      :segmentColors=\'["tomato", "gold", "limegreen"]\'\n      needleColor="lightgreen"\n      textColor="').concat("#AAA",'"\n    />\n  </div>\n')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.CustomSegmentColors=CustomSegmentColors;var CustomSegmentStops=addSourceDecorator(addSourceDecorator((function(){return'\n  <div>\n    <vue-speedometer \n      :needleHeightRatio="0.7"\n      :maxSegmentLabels="5"\n      :segments="3"\n      :customSegmentStops="[0, 500, 750, 900, 1000]"\n      :segmentColors=\'["firebrick", "tomato", "gold", "limegreen"]\'\n      :value="333"\n      textColor="'.concat("#AAA",'"\n    />\n    <vue-speedometer \n      :forceRender="true"\n      :maxSegmentLabels="1"\n      :customSegmentStops="[0, 777, 1000]"\n      :segmentColors=\'["#5959ac", "#AAA"]\'\n      needleColor="#5959ac"\n      :currentValueText=\'"Current Value: ${value}"\'\n      :value="777"\n      textColor="').concat("#AAA",'"\n    />\n    <vue-speedometer \n      :maxSegmentLabels="1"\n      :customSegmentStops="[-120, -100, 0]"\n      :segmentColors=\'["tomato", "gold"]\'\n      needleColor="#5959ac"\n      :currentValueText=\'"Current Value: ${value}"\'\n      :value="-100"\n      :minValue="-120"\n      :maxValue="0"\n      textColor="').concat("#AAA",'"\n    />\n  </div>\n')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.CustomSegmentStops=CustomSegmentStops;var FluidWidthView=addSourceDecorator(addSourceDecorator((function(){return{data:function data(){return{styles:{width:"500px",height:"300px",background:"#2a2744"}}},template:'\n    <div :style="styles">\n      <vue-speedometer \n        :fluidWidth="true"\n        :minValue="100"\n        :maxValue="500"\n        :value="473"\n        needleColor="steelblue"\n        textColor="'.concat("#AAA",'"\n      />\n      <div style="color: ').concat("#AAA",'">\n      Fluid width takes the width of the parent div (<strong>500px</strong> in this case)\n      </div>\n    </div>\n  ')}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.FluidWidthView=FluidWidthView;var NeedleTransitionDuration=addSourceDecorator(addSourceDecorator((function(){return'\n  <div>\n    <vue-speedometer \n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      textColor="'.concat("#AAA",'"\n    />\n    <vue-speedometer \n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="3000"\n      needleTransition="easeQuadInOut"\n      textColor="').concat("#AAA",'"\n    />\n  </div>\n')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.NeedleTransitionDuration=NeedleTransitionDuration;var ForceRenderTheComponent=addSourceDecorator(addSourceDecorator((function(){return{data:function data(){return{buttonStyles:{padding:"7px",border:"thin solid steelblue",background:"white",cursor:"pointer",marginBottom:"17px"},value1:{value:111,startColor:"blue",segments:5,width:300,height:300,currentValueText:"${value}"},value2:{value:222,startColor:"orange",segments:10,width:400,height:400,currentValueText:"Current Value: ${value}"},toggleStatus:!1}},methods:{onClick:function onClick(){this.toggleStatus=!this.toggleStatus}},template:'\n    <div style="background: #2a2744">\n    <div style="color: '.concat("#AAA",'">\n      By default, on props change only the current value and needle transition is updated. \n      Force render completly re-renders the whole component on update. \n      This is helpful for features like dynmaic width/height on resize\n      </div>\n      <hr />\n      <button @click="onClick" :style="buttonStyles">\n        <strong>Click Here to force render props</strong>\n      </button>\n      \n      <vue-speedometer\n        :value="toggleStatus ? value1.value : value2.value"\n        :startColor="toggleStatus ? value1.startColor : value2.startColor"\n        :forceRender="true"\n        :segments="toggleStatus ? value1.segments : value2.segments"\n        :width="toggleStatus ? value1.width : value2.width"\n        :height="toggleStatus ? value1.height : value2.height"\n        :currentValueText="toggleStatus ? value1.currentValueText : value2.currentValueText"\n        textColor="').concat("#AAA",'"\n      />\n    </div>\n')}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.ForceRenderTheComponent=ForceRenderTheComponent;var ConfiguringTheFormatForValuesDisplayed=addSourceDecorator(addSourceDecorator((function(){return'\n  <div>\n    <vue-speedometer\n      :maxValue="150"\n      :value="70.7"\n      valueFormat="d"\n      :customSegmentStops="[0, 50, 70, 90, 150]"\n      :segmentColors=\'["#bf616a", "#d08770", "#ebcb8b", "#a3be8c"]\'\n      textColor="'.concat("#AAA",'"\n    />\n    <vue-speedometer\n      :maxValue="150"\n      :value="70.7"\n      :segments="5"\n      valueFormat="d"\n      textColor="').concat("#AAA",'"\n    />\n  </div>\n')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.ConfiguringTheFormatForValuesDisplayed=ConfiguringTheFormatForValuesDisplayed;var CustomCurrentValueText=addSourceDecorator(addSourceDecorator((function(){return'\n  <div>\n    <vue-speedometer\n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      currentValueText="Current Value: ${value}"\n      textColor="'.concat("#AAA",'"\n    />\n  </div>\n')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.CustomCurrentValueText=CustomCurrentValueText;var CustomCurrentValuePlaceholderStyleForEgValue=addSourceDecorator(addSourceDecorator((function(){return'\n  <div>\n    <vue-speedometer\n      :value="333"\n      needleColor="steelblue"\n      :needleTransitionDuration="4000"\n      needleTransition="easeElastic"\n      currentValueText="Current Value: #{value}"\n      currentValuePlaceholderStyle="#{value}"\n      textColor="'.concat("#AAA",'"\n    />\n  </div>\n')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.CustomCurrentValuePlaceholderStyleForEgValue=CustomCurrentValuePlaceholderStyleForEgValue;var ConfigureNeedleLengthAndFontSizes=addSourceDecorator(addSourceDecorator((function(){return'\n  <div>\n    <vue-speedometer\n      :value="333"\n      :needleHeightRatio="0.5"\n      labelFontSize="15px"\n      valueTextFontSize="23px"\n      textColor="'.concat("#AAA",'"\n    />\n  </div>\n')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.ConfigureNeedleLengthAndFontSizes=ConfigureNeedleLengthAndFontSizes;var GradientEffectWithLargeNumberOfSegmentsAndMaxSegmentLabelsConfig=addSourceDecorator(addSourceDecorator((function(){return'\n  <div>\n    <vue-speedometer\n      :needleHeightRatio="0.7"\n      :maxSegmentLabels="5"\n      :segments="75"\n      :value="333"\n      textColor="'.concat("#AAA",'"\n    />\n  </div>\n')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.GradientEffectWithLargeNumberOfSegmentsAndMaxSegmentLabelsConfig=GradientEffectWithLargeNumberOfSegmentsAndMaxSegmentLabelsConfig;var NoSegmentLabels=addSourceDecorator(addSourceDecorator((function(){return'\n  <div>\n    <vue-speedometer\n      :maxSegmentLabels="0" \n      :segments="75"\n      textColor="'.concat("#AAA",'"\n    />\n    <vue-speedometer\n      :maxSegmentLabels="0"\n      :segments="4"\n      :value="333"\n      startColor="#2E3440"\n      endColor="#4C566A"\n      needleColor="#D8DEE9"\n      textColor="').concat("#AAA",'"\n    />\n  </div>\n')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.NoSegmentLabels=NoSegmentLabels;var NormalUpdationOfValues=addSourceDecorator(addSourceDecorator((function(){return{created:function created(){var e=this;window.setInterval((function(){e.toggle=!e.toggle}),3e3)},data:function data(){return{toggle:!1}},template:'\n    <div>\n      <vue-speedometer\n        :maxSegmentLabels="0" \n        :segments="75"\n        :value="toggle ? 333 : 555"\n        needleTransition="easeElastic"\n        :needleTransitionDuration="3333"\n        textColor="'.concat("#AAA",'"\n      />\n      <vue-speedometer\n        :maxSegmentLabels="0"\n        :segments="4"\n        :value="toggle ? 333 : 555"\n        startColor="#2E3440"\n        endColor="#4C566A"\n        needleColor="#D8DEE9"\n        textColor="').concat("#AAA",'"\n      />\n    </div>\n  ')}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.NormalUpdationOfValues=NormalUpdationOfValues;var CustomizeFontSizesAndSpacing=addSourceDecorator(addSourceDecorator((function(){return'\n  <div>\n    <vue-speedometer\n      :value="333"\n      :needleHeightRatio="0.5"\n      labelFontSize="31px"\n      valueTextFontSize="37px"\n      valueTextFontWeight="500"\n      :paddingHorizontal="17"\n      :paddingVertical="17"\n      currentValueText="Value: ${value}"\n      textColor="'.concat("#AAA",'"\n    />\n  </div>\n')}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});exports.CustomizeFontSizesAndSpacing=CustomizeFontSizesAndSpacing},459:function(module,exports,__webpack_require__){__webpack_require__(460),__webpack_require__(599),__webpack_require__(600),__webpack_require__(1259),__webpack_require__(1261),module.exports=__webpack_require__(1302)},529:function(module,exports){}},[[459,1,2]]]);
//# sourceMappingURL=main.00b713c7ca58c1cda039.bundle.js.map